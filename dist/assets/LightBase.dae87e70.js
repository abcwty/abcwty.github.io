var m=Object.defineProperty;var B=(r,o,t)=>o in r?m(r,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[o]=t;var a=(r,o,t)=>(B(r,typeof o!="symbol"?o+"":o,t),t);import{cm as R,cn as d,co as C,cp as b,cq as u,cr as g,cs as f,ct as y,cu as O,cv as j,cw as v,cx as x,cy as p,cz as z,cl as H}from"./index.66975801.js";class E extends R{constructor(t,i){const c=new b;super(c);a(this,"lightState",new d(void 0));a(this,"defaultShadowResolution",256);a(this,"defaultShadowBias",C);a(this,"shadowResolutionComputedState",new d(void 0));a(this,"shadowBiasComputedState",new d(void 0));a(this,"helperState",new d(!0));a(this,"castShadowState",new d(!0));a(this,"shadowResolutionState",new d(void 0));a(this,"shadowBiasState",new d(void 0));this.createEffect(()=>{var h,n,s,w;const e=new t;if(this.lightState.set(e),c.add(e),e.shadow&&this.castShadowState.get()){const l=(n=(h=this.shadowResolutionState.get())!=null?h:u())!=null?n:this.defaultShadowResolution,S=(w=(s=this.shadowBiasState.get())!=null?s:g())!=null?w:this.defaultShadowBias;this.shadowBiasComputedState.set(S),this.shadowResolutionComputedState.set(l),e.castShadow=!0,e.shadow.bias=S,e.shadow.mapSize.width=l,e.shadow.mapSize.height=l}return()=>{c.remove(e),e.dispose()}},[this.castShadowState.get,this.shadowResolutionState.get,this.shadowBiasState.get,u,g]),this.createEffect(()=>{const e=this.lightState.get();if(f()!==y||!this.helperState.get()||!e)return;const h=new O,n=j();if(h.watch(v(({target:s})=>{s===n&&x(this)})),i){const s=new i(e);p.add(s),s.add(n.outerObject3d),"update"in s&&h.watch(z(()=>s.update())),h.then(()=>{s.dispose(),p.remove(s)})}else this.outerObject3d.add(n.outerObject3d);return()=>{n.dispose(),h.cancel()}},[f,this.helperState.get,this.lightState.get])}get helper(){return this.helperState.get()}set helper(t){this.helperState.set(t)}get castShadow(){return this.castShadowState.get()}set castShadow(t){this.castShadowState.set(t)}get shadowResolution(){return this.shadowResolutionState.get()}set shadowResolution(t){this.shadowResolutionState.set(t)}get shadowBias(){return this.shadowBiasState.get()}set shadowBias(t){this.shadowBiasState.set(t)}get color(){const t=this.lightState.get();return t?"#"+t.color.getHexString():"#ffffff"}set color(t){this.cancelHandle("color",()=>this.lightState.get(i=>i&&(i.color=new H(t))))}get intensity(){const t=this.lightState.get();return t?t.intensity:1}set intensity(t){this.cancelHandle("intensity",()=>this.lightState.get(i=>i&&(i.intensity=t)))}}export{E as L};
