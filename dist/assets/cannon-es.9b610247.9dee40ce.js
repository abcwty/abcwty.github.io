class Vn{constructor(){this.matrix={}}get(t,e){let{id:s}=t,{id:i}=e;if(i>s){const o=i;i=s,s=o}return`${s}-${i}`in this.matrix}set(t,e,s){let{id:i}=t,{id:o}=e;if(o>i){const n=o;o=i,i=n}s?this.matrix[`${i}-${o}`]=!0:delete this.matrix[`${i}-${o}`]}reset(){this.matrix={}}setNumObjects(t){}}class et{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new h);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new h);const s=this.elements,i=t.x,o=t.y,n=t.z;return e.x=s[0]*i+s[1]*o+s[2]*n,e.y=s[3]*i+s[4]*o+s[5]*n,e.z=s[6]*i+s[7]*o+s[8]*n,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new et);const s=this.elements,i=t.elements,o=e.elements,n=s[0],r=s[1],a=s[2],l=s[3],c=s[4],u=s[5],d=s[6],y=s[7],p=s[8],m=i[0],v=i[1],g=i[2],f=i[3],w=i[4],x=i[5],b=i[6],B=i[7],F=i[8];return o[0]=n*m+r*f+a*b,o[1]=n*v+r*w+a*B,o[2]=n*g+r*x+a*F,o[3]=l*m+c*f+u*b,o[4]=l*v+c*w+u*B,o[5]=l*g+c*x+u*F,o[6]=d*m+y*f+p*b,o[7]=d*v+y*w+p*B,o[8]=d*g+y*x+p*F,e}scale(t,e){e===void 0&&(e=new et);const s=this.elements,i=e.elements;for(let o=0;o!==3;o++)i[3*o+0]=t.x*s[3*o+0],i[3*o+1]=t.y*s[3*o+1],i[3*o+2]=t.z*s[3*o+2];return e}solve(t,e){e===void 0&&(e=new h);const s=3,i=4,o=[];let n,r;for(n=0;n<s*i;n++)o.push(0);for(n=0;n<3;n++)for(r=0;r<3;r++)o[n+i*r]=this.elements[n+3*r];o[3+4*0]=t.x,o[3+4*1]=t.y,o[3+4*2]=t.z;let a=3;const l=a;let c;const u=4;let d;do{if(n=l-a,o[n+i*n]===0){for(r=n+1;r<l;r++)if(o[n+i*r]!==0){c=u;do d=u-c,o[d+i*n]+=o[d+i*r];while(--c);break}}if(o[n+i*n]!==0)for(r=n+1;r<l;r++){const y=o[n+i*r]/o[n+i*n];c=u;do d=u-c,o[d+i*r]=d<=n?0:o[d+i*r]-o[d+i*n]*y;while(--c)}}while(--a);if(e.z=o[2*i+3]/o[2*i+2],e.y=(o[1*i+3]-o[1*i+2]*e.z)/o[1*i+1],e.x=(o[0*i+3]-o[0*i+2]*e.z-o[0*i+1]*e.y)/o[0*i+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new et);const e=3,s=6,i=$e;let o,n;for(o=0;o<3;o++)for(n=0;n<3;n++)i[o+s*n]=this.elements[o+3*n];i[3+6*0]=1,i[3+6*1]=0,i[3+6*2]=0,i[4+6*0]=0,i[4+6*1]=1,i[4+6*2]=0,i[5+6*0]=0,i[5+6*1]=0,i[5+6*2]=1;let r=3;const a=r;let l;const c=s;let u;do{if(o=a-r,i[o+s*o]===0){for(n=o+1;n<a;n++)if(i[o+s*n]!==0){l=c;do u=c-l,i[u+s*o]+=i[u+s*n];while(--l);break}}if(i[o+s*o]!==0)for(n=o+1;n<a;n++){const d=i[o+s*n]/i[o+s*o];l=c;do u=c-l,i[u+s*n]=u<=o?0:i[u+s*n]-i[u+s*o]*d;while(--l)}}while(--r);o=2;do{n=o-1;do{const d=i[o+s*n]/i[o+s*o];l=s;do u=s-l,i[u+s*n]=i[u+s*n]-i[u+s*o]*d;while(--l)}while(n--)}while(--o);o=2;do{const d=1/i[o+s*o];l=s;do u=s-l,i[u+s*o]=i[u+s*o]*d;while(--l)}while(o--);o=2;do{n=2;do{if(u=i[e+n+s*o],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(o,n,u)}while(n--)}while(o--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,o=t.w,n=e+e,r=s+s,a=i+i,l=e*n,c=e*r,u=e*a,d=s*r,y=s*a,p=i*a,m=o*n,v=o*r,g=o*a,f=this.elements;return f[3*0+0]=1-(d+p),f[3*0+1]=c-g,f[3*0+2]=u+v,f[3*1+0]=c+g,f[3*1+1]=1-(l+p),f[3*1+2]=y-m,f[3*2+0]=u-v,f[3*2+1]=y+m,f[3*2+2]=1-(l+d),this}transpose(t){t===void 0&&(t=new et);const e=this.elements,s=t.elements;let i;return s[0]=e[0],s[4]=e[4],s[8]=e[8],i=e[1],s[1]=e[3],s[3]=i,i=e[2],s[2]=e[6],s[6]=i,i=e[5],s[5]=e[7],s[7]=i,t}}const $e=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class h{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new h);const s=t.x,i=t.y,o=t.z,n=this.x,r=this.y,a=this.z;return e.x=r*o-a*i,e.y=a*s-n*o,e.z=n*i-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new h(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new h(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new et([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const o=1/i;this.x*=o,this.y*=o,this.z*=o}else this.x=0,this.y=0,this.z=0;return i}unit(t){t===void 0&&(t=new h);const e=this.x,s=this.y,i=this.z;let o=Math.sqrt(e*e+s*s+i*i);return o>0?(o=1/o,t.x=e*o,t.y=s*o,t.z=i*o):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return Math.sqrt((o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return(o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i)}scale(t,e){e===void 0&&(e=new h);const s=this.x,i=this.y,o=this.z;return e.x=t*s,e.y=t*i,e.z=t*o,e}vmul(t,e){return e===void 0&&(e=new h),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new h),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new h),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=Ke,o=1/s;i.set(this.x*o,this.y*o,this.z*o);const n=Ze;Math.abs(i.x)<.9?(n.set(1,0,0),i.cross(n,t)):(n.set(0,1,0),i.cross(n,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,o=this.y,n=this.z;s.x=i+(t.x-i)*e,s.y=o+(t.y-o)*e,s.z=n+(t.z-n)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(le),le.almostEquals(t,e)}clone(){return new h(this.x,this.y,this.z)}}h.ZERO=new h(0,0,0);h.UNIT_X=new h(1,0,0);h.UNIT_Y=new h(0,1,0);h.UNIT_Z=new h(0,0,1);const Ke=new h,Ze=new h,le=new h;class U{constructor(t){t===void 0&&(t={}),this.lowerBound=new h,this.upperBound=new h,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const o=this.lowerBound,n=this.upperBound,r=s;o.copy(t[0]),r&&r.vmult(o,o),n.copy(o);for(let a=1;a<t.length;a++){let l=t[a];r&&(r.vmult(l,he),l=he),l.x>n.x&&(n.x=l.x),l.x<o.x&&(o.x=l.x),l.y>n.y&&(n.y=l.y),l.y<o.y&&(o.y=l.y),l.z>n.z&&(n.z=l.z),l.z<o.z&&(o.z=l.z)}return e&&(e.vadd(o,o),e.vadd(n,n)),i&&(o.x-=i,o.y-=i,o.z-=i,n.x+=i,n.y+=i,n.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new U().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound,n=i.x<=s.x&&s.x<=o.x||e.x<=o.x&&o.x<=s.x,r=i.y<=s.y&&s.y<=o.y||e.y<=o.y&&o.y<=s.y,a=i.z<=s.z&&s.z<=o.z||e.z<=o.z&&o.z<=s.z;return n&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound;return e.x<=i.x&&s.x>=o.x&&e.y<=i.y&&s.y>=o.y&&e.z<=i.z&&s.z>=o.z}getCorners(t,e,s,i,o,n,r,a){const l=this.lowerBound,c=this.upperBound;t.copy(l),e.set(c.x,l.y,l.z),s.set(c.x,c.y,l.z),i.set(l.x,c.y,c.z),o.set(c.x,l.y,c.z),n.set(l.x,c.y,l.z),r.set(l.x,l.y,c.z),a.copy(c)}toLocalFrame(t,e){const s=ce,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],c=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,c,u);for(let d=0;d!==8;d++){const y=s[d];t.pointToLocal(y,y)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ce,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],c=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,c,u);for(let d=0;d!==8;d++){const y=s[d];t.pointToWorld(y,y)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,o=1/e.y,n=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*o,c=(this.upperBound.y-s.y)*o,u=(this.lowerBound.z-s.z)*n,d=(this.upperBound.z-s.z)*n,y=Math.max(Math.max(Math.min(r,a),Math.min(l,c)),Math.min(u,d)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,c)),Math.max(u,d));return!(p<0||y>p)}}const he=new h,ce=[new h,new h,new h,new h,new h,new h,new h,new h];class de{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const o=i;i=s,s=o}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:o}=e;if(o>i){const n=o;o=i,i=n}this.matrix[(i*(i+1)>>1)+o-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class Ve{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const i=s[t].indexOf(e);return i!==-1&&s[t].splice(i,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const e=this._listeners[t.type];if(e!==void 0){t.target=this;for(let s=0,i=e.length;s<i;s++)e[s].call(this,t)}return this}}class D{constructor(t,e,s,i){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),i===void 0&&(i=1),this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new h),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Qe,i=_e;t.tangents(s,i),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new D);const s=this.x,i=this.y,o=this.z,n=this.w,r=t.x,a=t.y,l=t.z,c=t.w;return e.x=s*c+n*r+i*l-o*a,e.y=i*c+n*a+o*r-s*l,e.z=o*c+n*l+s*a-i*r,e.w=n*c-s*r-i*a-o*l,e}inverse(t){t===void 0&&(t=new D);const e=this.x,s=this.y,i=this.z,o=this.w;this.conjugate(t);const n=1/(e*e+s*s+i*i+o*o);return t.x*=n,t.y*=n,t.z*=n,t.w*=n,t}conjugate(t){return t===void 0&&(t=new D),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new h);const s=t.x,i=t.y,o=t.z,n=this.x,r=this.y,a=this.z,l=this.w,c=l*s+r*o-a*i,u=l*i+a*s-n*o,d=l*o+n*i-r*s,y=-n*s-r*i-a*o;return e.x=c*l+y*-n+u*-a-d*-r,e.y=u*l+y*-r+d*-n-c*-a,e.z=d*l+y*-a+c*-r-u*-n,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,i,o;const n=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const c=n*r+a*l;if(c>.499&&(s=2*Math.atan2(n,l),i=Math.PI/2,o=0),c<-.499&&(s=-2*Math.atan2(n,l),i=-Math.PI/2,o=0),s===void 0){const u=n*n,d=r*r,y=a*a;s=Math.atan2(2*r*l-2*n*a,1-2*d-2*y),i=Math.asin(2*c),o=Math.atan2(2*n*l-2*r*a,1-2*u-2*y)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=i,t.x=o}setFromEuler(t,e,s,i){i===void 0&&(i="XYZ");const o=Math.cos(t/2),n=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),c=Math.sin(s/2);return i==="XYZ"?(this.x=a*n*r+o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r-a*l*c):i==="YXZ"?(this.x=a*n*r+o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r+a*l*c):i==="ZXY"?(this.x=a*n*r-o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r-a*l*c):i==="ZYX"?(this.x=a*n*r-o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r+a*l*c):i==="YZX"?(this.x=a*n*r+o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r-a*l*c):i==="XZY"&&(this.x=a*n*r-o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r+a*l*c),this}clone(){return new D(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new D);const i=this.x,o=this.y,n=this.z,r=this.w;let a=t.x,l=t.y,c=t.z,u=t.w,d,y,p,m,v;return y=i*a+o*l+n*c+r*u,y<0&&(y=-y,a=-a,l=-l,c=-c,u=-u),1-y>1e-6?(d=Math.acos(y),p=Math.sin(d),m=Math.sin((1-e)*d)/p,v=Math.sin(e*d)/p):(m=1-e,v=e),s.x=m*i+v*a,s.y=m*o+v*l,s.z=m*n+v*c,s.w=m*r+v*u,s}integrate(t,e,s,i){i===void 0&&(i=new D);const o=t.x*s.x,n=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,c=this.z,u=this.w,d=e*.5;return i.x+=d*(o*u+n*c-r*l),i.y+=d*(n*u+r*a-o*c),i.z+=d*(r*u+o*l-n*a),i.w+=d*(-o*a-n*l-r*c),i}}const Qe=new h,_e=new h,Je={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class z{constructor(t){t===void 0&&(t={}),this.id=z.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}z.idCounter=0;z.types=Je;class O{constructor(t){t===void 0&&(t={}),this.position=new h,this.quaternion=new D,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i){return i===void 0&&(i=new h),s.vsub(t,i),e.conjugate(ue),ue.vmult(i,i),i}static pointToWorldFrame(t,e,s,i){return i===void 0&&(i=new h),e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new h),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i){return i===void 0&&(i=new h),e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const ue=new D;class vt extends z{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:i=[],axes:o,boundingSphereRadius:n}=t;super({type:z.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,this.faceNormals.length===0&&this.computeNormals(),n?this.boundingSphereRadius=n:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new h;for(let o=0;o!==t.length;o++){const n=t[o],r=n.length;for(let a=0;a!==r;a++){const l=(a+1)%r;e[n[a]].vsub(e[n[l]],i),i.normalize();let c=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(i)||s[u].almostEquals(i)){c=!0;break}c||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let i=0;i<this.faces[t].length;i++)if(!this.vertices[this.faces[t][i]])throw new Error(`Vertex ${this.faces[t][i]} not found!`);const e=this.faceNormals[t]||new h;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let i=0;i<this.faces[t].length;i++)console.warn(`.vertices[${this.faces[t][i]}] = Vec3(${this.vertices[this.faces[t][i]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],o=this.vertices[s[1]],n=this.vertices[s[2]];vt.computeNormal(i,o,n,e)}static computeNormal(t,e,s,i){const o=new h,n=new h;e.vsub(t,n),s.vsub(e,o),o.cross(n,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,o,n,r,a,l){const c=new h;let u=-1,d=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){c.copy(s.faceNormals[p]),o.vmult(c,c);const m=c.dot(n);m>d&&(d=m,u=p)}const y=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],v=new h;v.copy(m),o.vmult(v,v),i.vadd(v,v),y.push(v)}u>=0&&this.clipFaceAgainstHull(n,t,e,y,r,a,l)}findSeparatingAxis(t,e,s,i,o,n,r,a){const l=new h,c=new h,u=new h,d=new h,y=new h,p=new h;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let g=0;g!==v.uniqueAxes.length;g++){s.vmult(v.uniqueAxes[g],l);const f=v.testSepAxis(l,t,e,s,i,o);if(f===!1)return!1;f<m&&(m=f,n.copy(l))}else{const g=r?r.length:v.faces.length;for(let f=0;f<g;f++){const w=r?r[f]:f;l.copy(v.faceNormals[w]),s.vmult(l,l);const x=v.testSepAxis(l,t,e,s,i,o);if(x===!1)return!1;x<m&&(m=x,n.copy(l))}}if(t.uniqueAxes)for(let g=0;g!==t.uniqueAxes.length;g++){o.vmult(t.uniqueAxes[g],c);const f=v.testSepAxis(c,t,e,s,i,o);if(f===!1)return!1;f<m&&(m=f,n.copy(c))}else{const g=a?a.length:t.faces.length;for(let f=0;f<g;f++){const w=a?a[f]:f;c.copy(t.faceNormals[w]),o.vmult(c,c);const x=v.testSepAxis(c,t,e,s,i,o);if(x===!1)return!1;x<m&&(m=x,n.copy(c))}}for(let g=0;g!==v.uniqueEdges.length;g++){s.vmult(v.uniqueEdges[g],d);for(let f=0;f!==t.uniqueEdges.length;f++)if(o.vmult(t.uniqueEdges[f],y),d.cross(y,p),!p.almostZero()){p.normalize();const w=v.testSepAxis(p,t,e,s,i,o);if(w===!1)return!1;w<m&&(m=w,n.copy(p))}}return i.vsub(e,u),u.dot(n)>0&&n.negate(n),!0}testSepAxis(t,e,s,i,o,n){const r=this;vt.project(r,t,s,i,Kt),vt.project(e,t,o,n,Zt);const a=Kt[0],l=Kt[1],c=Zt[0],u=Zt[1];if(a<u||c<l)return!1;const d=a-u,y=c-l;return d<y?d:y}calculateLocalInertia(t,e){const s=new h,i=new h;this.computeLocalAABB(i,s);const o=s.x-i.x,n=s.y-i.y,r=s.z-i.z;e.x=1/12*t*(2*n*2*n+2*r*2*r),e.y=1/12*t*(2*o*2*o+2*r*2*r),e.z=1/12*t*(2*n*2*n+2*o*2*o)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,o,n,r){const a=new h,l=new h,c=new h,u=new h,d=new h,y=new h,p=new h,m=new h,v=this,g=[],f=i,w=g;let x=-1,b=Number.MAX_VALUE;for(let q=0;q<v.faces.length;q++){a.copy(v.faceNormals[q]),s.vmult(a,a);const N=a.dot(t);N<b&&(b=N,x=q)}if(x<0)return;const B=v.faces[x];B.connectedFaces=[];for(let q=0;q<v.faces.length;q++)for(let N=0;N<v.faces[q].length;N++)B.indexOf(v.faces[q][N])!==-1&&q!==x&&B.connectedFaces.indexOf(q)===-1&&B.connectedFaces.push(q);const F=B.length;for(let q=0;q<F;q++){const N=v.vertices[B[q]],T=v.vertices[B[(q+1)%F]];N.vsub(T,l),c.copy(l),s.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[x]),s.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),y.copy(N),s.vmult(y,y),e.vadd(y,y);const A=B.connectedFaces[q];p.copy(this.faceNormals[A]);const S=this.getPlaneConstantOfFace(A);m.copy(p),s.vmult(m,m);const C=S-m.dot(e);for(this.clipFaceAgainstPlane(f,w,m,C);f.length;)f.shift();for(;w.length;)f.push(w.shift())}p.copy(this.faceNormals[x]);const P=this.getPlaneConstantOfFace(x);m.copy(p),s.vmult(m,m);const W=P-m.dot(e);for(let q=0;q<f.length;q++){let N=m.dot(f[q])+W;if(N<=o&&(console.log(`clamped: depth=${N} to minDist=${o}`),N=o),N<=n){const T=f[q];if(N<=1e-6){const A={point:T,normal:m,depth:N};r.push(A)}}}}clipFaceAgainstPlane(t,e,s,i){let o,n;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];o=s.dot(a)+i;for(let c=0;c<r;c++){if(l=t[c],n=s.dot(l)+i,o<0)if(n<0){const u=new h;u.copy(l),e.push(u)}else{const u=new h;a.lerp(l,o/(o-n),u),e.push(u)}else if(n<0){const u=new h;a.lerp(l,o/(o-n),u),e.push(u),e.push(l)}a=l,o=n}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new h);const s=this.vertices,i=this.worldVertices;for(let o=0;o!==this.vertices.length;o++)e.vmult(s[o],i[o]),t.vadd(i[o],i[o]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const o=s[i];o.x<t.x?t.x=o.x:o.x>e.x&&(e.x=o.x),o.y<t.y?t.y=o.y:o.y>e.y&&(e.y=o.y),o.z<t.z?t.z=o.z:o.z>e.z&&(e.z=o.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new h);const s=this.faceNormals,i=this.worldFaceNormals;for(let o=0;o!==e;o++)t.vmult(s[o],i[o]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=this.vertices;let n,r,a,l,c,u,d=new h;for(let y=0;y<o.length;y++){d.copy(o[y]),e.vmult(d,d),t.vadd(d,d);const p=d;(n===void 0||p.x<n)&&(n=p.x),(l===void 0||p.x>l)&&(l=p.x),(r===void 0||p.y<r)&&(r=p.y),(c===void 0||p.y>c)&&(c=p.y),(a===void 0||p.z<a)&&(a=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(n,r,a),i.set(l,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new h);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let o=0;o<s;o++){const n=i[o];e.vmult(n,n)}for(let o=0;o<this.faceNormals.length;o++){const n=this.faceNormals[o];e.vmult(n,n)}}if(t)for(let o=0;o<s;o++){const n=i[o];n.vadd(t,n)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,o=null,n=new h;this.getAveragePointLocal(n);for(let r=0;r<this.faces.length;r++){let a=i[r];const l=e[s[r][0]],c=new h;t.vsub(l,c);const u=a.dot(c),d=new h;n.vsub(l,d);const y=a.dot(d);if(u<0&&y>0||u>0&&y<0)return!1}return o?1:-1}static project(t,e,s,i,o){const n=t.vertices.length,r=ts;let a=0,l=0;const c=es,u=t.vertices;c.setZero(),O.vectorToLocalFrame(s,i,e,r),O.pointToLocalFrame(s,i,c,c);const d=c.dot(r);l=a=u[0].dot(r);for(let y=1;y<n;y++){const p=u[y].dot(r);p>a&&(a=p),p<l&&(l=p)}if(l-=d,a-=d,l>a){const y=l;l=a,a=y}o[0]=a,o[1]=l}}const Kt=[],Zt=[];new h;const ts=new h,es=new h;class Gt extends z{constructor(t){super({type:z.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=h,o=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],n=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],a=new vt({vertices:o,faces:n,axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new h),Gt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),e!==void 0)for(let o=0;o!==s.length;o++)e.vmult(s[o],s[o]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,o=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let n=0;n<o.length;n++)mt.set(o[n][0],o[n][1],o[n][2]),e.vmult(mt,mt),t.vadd(mt,mt),s(mt.x,mt.y,mt.z)}calculateWorldAABB(t,e,s,i){const o=this.halfExtents;st[0].set(o.x,o.y,o.z),st[1].set(-o.x,o.y,o.z),st[2].set(-o.x,-o.y,o.z),st[3].set(-o.x,-o.y,-o.z),st[4].set(o.x,-o.y,-o.z),st[5].set(o.x,o.y,-o.z),st[6].set(-o.x,o.y,-o.z),st[7].set(o.x,-o.y,o.z);const n=st[0];e.vmult(n,n),t.vadd(n,n),i.copy(n),s.copy(n);for(let r=1;r<8;r++){const a=st[r];e.vmult(a,a),t.vadd(a,a);const l=a.x,c=a.y,u=a.z;l>i.x&&(i.x=l),c>i.y&&(i.y=c),u>i.z&&(i.z=u),l<s.x&&(s.x=l),c<s.y&&(s.y=c),u<s.z&&(s.z=u)}}}const mt=new h,st=[new h,new h,new h,new h,new h,new h,new h,new h],se={DYNAMIC:1,STATIC:2,KINEMATIC:4},ie={AWAKE:0,SLEEPY:1,SLEEPING:2};class R extends Ve{constructor(t){t===void 0&&(t={}),super(),this.id=R.idCounter++,this.index=-1,this.world=null,this.vlambda=new h,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new h,this.previousPosition=new h,this.interpolatedPosition=new h,this.initPosition=new h,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new h,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new h,this.force=new h;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?R.STATIC:R.DYNAMIC,typeof t.type==typeof R.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=R.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new h,this.quaternion=new D,this.initQuaternion=new D,this.previousQuaternion=new D,this.interpolatedQuaternion=new D,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new h,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new h,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new h,this.invInertia=new h,this.invInertiaWorld=new et,this.invMassSolve=0,this.invInertiaSolve=new h,this.invInertiaWorldSolve=new et,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new h(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new h(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new U,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new h,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=R.AWAKE,this.wakeUpAfterNarrowphase=!1,t===R.SLEEPING&&this.dispatchEvent(R.wakeupEvent)}sleep(){this.sleepState=R.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===R.AWAKE&&s<i?(this.sleepState=R.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(R.sleepyEvent)):e===R.SLEEPY&&s>i?this.wakeUp():e===R.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(R.sleepEvent))}}updateSolveMassProperties(){this.sleepState===R.SLEEPING||this.type===R.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new h),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new h),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new h,o=new D;return e&&i.copy(e),s&&o.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(o),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let o=0;o!==s;o++){const n=t[o];n.updateBoundingSphereRadius();const r=e[o].length(),a=n.boundingSphereRadius;r+a>i&&(i=r+a)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,o=ss,n=is,r=this.quaternion,a=this.aabb,l=os;for(let c=0;c!==i;c++){const u=t[c];r.vmult(e[c],o),o.vadd(this.position,o),r.mult(s[c],n),u.calculateWorldAABB(o,n,l.lowerBound,l.upperBound),c===0?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=ns,i=rs;s.setRotationFromQuaternion(this.quaternion),s.transpose(i),s.scale(e,s),s.mmult(i,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new h),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const s=as;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new h),this.type!==R.DYNAMIC)return;const s=ls,i=hs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===R.DYNAMIC&&(this.sleepState===R.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new h),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const s=e,i=cs;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const o=ds;s.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new h),this.type!==R.DYNAMIC)return;const s=us,i=ps;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=ys;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Gt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new h;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===R.DYNAMIC||this.type===R.KINEMATIC)||this.sleepState===R.SLEEPING)return;const i=this.velocity,o=this.angularVelocity,n=this.position,r=this.force,a=this.torque,l=this.quaternion,c=this.invMass,u=this.invInertiaWorld,d=this.linearFactor,y=c*t;i.x+=r.x*y*d.x,i.y+=r.y*y*d.y,i.z+=r.z*y*d.z;const p=u.elements,m=this.angularFactor,v=a.x*m.x,g=a.y*m.y,f=a.z*m.z;o.x+=t*(p[0]*v+p[1]*g+p[2]*f),o.y+=t*(p[3]*v+p[4]*g+p[5]*f),o.z+=t*(p[6]*v+p[7]*g+p[8]*f),n.x+=i.x*t,n.y+=i.y*t,n.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}R.idCounter=0;R.COLLIDE_EVENT_NAME="collide";R.DYNAMIC=se.DYNAMIC;R.STATIC=se.STATIC;R.KINEMATIC=se.KINEMATIC;R.AWAKE=ie.AWAKE;R.SLEEPY=ie.SLEEPY;R.SLEEPING=ie.SLEEPING;R.wakeupEvent={type:"wakeup"};R.sleepyEvent={type:"sleepy"};R.sleepEvent={type:"sleep"};const ss=new h,is=new D,os=new U,ns=new et,rs=new et;new et;const as=new h,ls=new h,hs=new h,cs=new h,ds=new h,us=new h,ps=new h,ys=new h;class oe{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&R.STATIC)!==0||t.sleepState===R.SLEEPING)&&((e.type&R.STATIC)!==0||e.sleepState===R.SLEEPING))}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const o=ms;e.position.vsub(t.position,o);const n=(t.boundingRadius+e.boundingRadius)**2;o.lengthSquared()<n&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=vs,i=fs,o=gs,n=t.length;for(let r=0;r!==n;r++)i[r]=t[r],o[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==n;r++){const a=i[r].id,l=o[r].id,c=a<l?`${a},${l}`:`${l},${a}`;s[c]=r,s.keys.push(c)}for(let r=0;r!==s.keys.length;r++){const a=s.keys.pop(),l=s[a];t.push(i[l]),e.push(o[l]),delete s[a]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new h;t.position.vsub(e.position,s);const i=t.shapes[0],o=e.shapes[0];return Math.pow(i.boundingSphereRadius+o.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const ms=new h;new h;new D;new h;const vs={keys:[]},fs=[],gs=[];new h;class jn extends oe{constructor(t,e,s,i,o){t===void 0&&(t=new h(100,100,100)),e===void 0&&(e=new h(-100,-100,-100)),s===void 0&&(s=10),i===void 0&&(i=10),o===void 0&&(o=10),super(),this.nx=s,this.ny=i,this.nz=o,this.aabbMin=t,this.aabbMax=e;const n=this.nx*this.ny*this.nz;if(n<=0)throw"GridBroadphase: Each dimension's n must be >0";this.bins=[],this.binLengths=[],this.bins.length=n,this.binLengths.length=n;for(let r=0;r<n;r++)this.bins[r]=[],this.binLengths[r]=0}collisionPairs(t,e,s){const i=t.bodies.length,o=t.bodies,n=this.aabbMax,r=this.aabbMin,a=this.nx,l=this.ny,c=this.nz,u=l*c,d=c,y=1,p=n.x,m=n.y,v=n.z,g=r.x,f=r.y,w=r.z,x=a/(p-g),b=l/(m-f),B=c/(v-w),F=(p-g)/a,P=(m-f)/l,W=(v-w)/c,q=Math.sqrt(F*F+P*P+W*W)*.5,N=z.types,T=N.SPHERE,A=N.PLANE;N.BOX,N.COMPOUND,N.CONVEXPOLYHEDRON;const S=this.bins,C=this.binLengths,I=this.bins.length;for(let L=0;L!==I;L++)C[L]=0;const V=Math.ceil;function k(L,j,G,M,Z,Q,_){let X=(L-g)*x|0,K=(j-f)*b|0,rt=(G-w)*B|0,at=V((M-g)*x),lt=V((Z-f)*b),ht=V((Q-w)*B);X<0?X=0:X>=a&&(X=a-1),K<0?K=0:K>=l&&(K=l-1),rt<0?rt=0:rt>=c&&(rt=c-1),at<0?at=0:at>=a&&(at=a-1),lt<0?lt=0:lt>=l&&(lt=l-1),ht<0?ht=0:ht>=c&&(ht=c-1),X*=u,K*=d,rt*=y,at*=u,lt*=d,ht*=y;for(let At=X;At<=at;At+=u)for(let Bt=K;Bt<=lt;Bt+=d)for(let Et=rt;Et<=ht;Et+=y){const ae=At+Bt+Et;S[ae][C[ae]++]=_}}for(let L=0;L!==i;L++){const j=o[L],G=j.shapes[0];switch(G.type){case T:{const M=G,Z=j.position.x,Q=j.position.y,_=j.position.z,X=M.radius;k(Z-X,Q-X,_-X,Z+X,Q+X,_+X,j);break}case A:{const M=G;M.worldNormalNeedsUpdate&&M.computeWorldNormal(j.quaternion);const Z=M.worldNormal,Q=g+F*.5-j.position.x,_=f+P*.5-j.position.y,X=w+W*.5-j.position.z,K=ws;K.set(Q,_,X);for(let rt=0,at=0;rt!==a;rt++,at+=u,K.y=_,K.x+=F)for(let lt=0,ht=0;lt!==l;lt++,ht+=d,K.z=X,K.y+=P)for(let At=0,Bt=0;At!==c;At++,Bt+=y,K.z+=W)if(K.dot(Z)<q){const Et=at+ht+Bt;S[Et][C[Et]++]=j}break}default:{j.aabbNeedsUpdate&&j.updateAABB(),k(j.aabb.lowerBound.x,j.aabb.lowerBound.y,j.aabb.lowerBound.z,j.aabb.upperBound.x,j.aabb.upperBound.y,j.aabb.upperBound.z,j);break}}}for(let L=0;L!==I;L++){const j=C[L];if(j>1){const G=S[L];for(let M=0;M!==j;M++){const Z=G[M];for(let Q=0;Q!==M;Q++){const _=G[Q];this.needBroadphaseCollision(Z,_)&&this.intersectionTest(Z,_,e,s)}}}}this.makePairsUnique(e,s)}}const ws=new h;new h;class xs extends oe{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,o=i.length;let n,r;for(let a=0;a!==o;a++)for(let l=0;l!==a;l++)n=i[a],r=i[l],this.needBroadphaseCollision(n,r)&&this.intersectionTest(n,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let i=0;i<t.bodies.length;i++){const o=t.bodies[i];o.aabbNeedsUpdate&&o.updateAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class qt{constructor(){this.rayFromWorld=new h,this.rayToWorld=new h,this.hitNormalWorld=new h,this.hitPointWorld=new h,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,o,n,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=o,this.body=n,this.distance=r}}let je,Oe,ke,He,Ue,De,Ge;const ne={CLOSEST:1,ANY:2,ALL:4};je=z.types.SPHERE;Oe=z.types.PLANE;ke=z.types.BOX;He=z.types.CYLINDER;Ue=z.types.CONVEXPOLYHEDRON;De=z.types.HEIGHTFIELD;Ge=z.types.TRIMESH;class Y{get[je](){return this._intersectSphere}get[Oe](){return this._intersectPlane}get[ke](){return this._intersectBox}get[He](){return this._intersectConvex}get[Ue](){return this._intersectConvex}get[De](){return this._intersectHeightfield}get[Ge](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new h),e===void 0&&(e=new h),this.from=t.clone(),this.to=e.clone(),this.direction=new h,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Y.ANY,this.result=new qt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||Y.ANY,this.result=e.result||new qt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(pe),Qt.length=0,t.broadphase.aabbQuery(t,pe,Qt),this.intersectBodies(Qt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const i=bs,o=As;for(let n=0,r=t.shapes.length;n<r;n++){const a=t.shapes[n];if(!(s&&!a.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[n],o),t.quaternion.vmult(t.shapeOffsets[n],i),i.vadd(t.position,i),this.intersectShape(a,o,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,i=t.length;!this.result.shouldStop&&s<i;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const o=this.from;if(Ls(o,this.direction,s)>t.boundingSphereRadius)return;const n=this[t.type];n&&n.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,o){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,o)}_intersectPlane(t,e,s,i,o){const n=this.from,r=this.to,a=this.direction,l=new h(0,0,1);e.vmult(l,l);const c=new h;n.vsub(s,c);const u=c.dot(l);r.vsub(s,c);const d=c.dot(l);if(u*d>0||n.distanceTo(r)<u)return;const y=l.dot(a);if(Math.abs(y)<this.precision)return;const p=new h,m=new h,v=new h;n.vsub(s,p);const g=-l.dot(p)/y;a.scale(g,m),n.vadd(m,v),this.reportIntersection(l,v,o,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,o=this.from;e.x=Math.min(i.x,o.x),e.y=Math.min(i.y,o.y),e.z=Math.min(i.z,o.z),s.x=Math.max(i.x,o.x),s.y=Math.max(i.y,o.y),s.z=Math.max(i.z,o.z)}_intersectHeightfield(t,e,s,i,o){t.data,t.elementSize;const n=Bs;n.from.copy(this.from),n.to.copy(this.to),O.pointToLocalFrame(s,e,n.from,n.from),O.pointToLocalFrame(s,e,n.to,n.to),n.updateDirection();const r=Es;let a,l,c,u;a=l=0,c=u=t.data.length-1;const d=new U;n.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let y=a;y<c;y++)for(let p=l;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(y,p,d),!!d.overlapsRay(n)){if(t.getConvexTrianglePillar(y,p,!1),O.pointToWorldFrame(s,e,t.pillarOffset,Lt),this._intersectConvex(t.pillarConvex,e,Lt,i,o,ye),this.result.shouldStop)return;t.getConvexTrianglePillar(y,p,!0),O.pointToWorldFrame(s,e,t.pillarOffset,Lt),this._intersectConvex(t.pillarConvex,e,Lt,i,o,ye)}}}_intersectSphere(t,e,s,i,o){const n=this.from,r=this.to,a=t.radius,l=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2,c=2*((r.x-n.x)*(n.x-s.x)+(r.y-n.y)*(n.y-s.y)+(r.z-n.z)*(n.z-s.z)),u=(n.x-s.x)**2+(n.y-s.y)**2+(n.z-s.z)**2-a**2,d=c**2-4*l*u,y=Ss,p=Cs;if(!(d<0))if(d===0)n.lerp(r,d,y),y.vsub(s,p),p.normalize(),this.reportIntersection(p,y,o,i,-1);else{const m=(-c-Math.sqrt(d))/(2*l),v=(-c+Math.sqrt(d))/(2*l);if(m>=0&&m<=1&&(n.lerp(r,m,y),y.vsub(s,p),p.normalize(),this.reportIntersection(p,y,o,i,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(n.lerp(r,v,y),y.vsub(s,p),p.normalize(),this.reportIntersection(p,y,o,i,-1))}}_intersectConvex(t,e,s,i,o,n){const r=zs,a=me,l=n&&n.faceList||null,c=t.faces,u=t.vertices,d=t.faceNormals,y=this.direction,p=this.from,m=this.to,v=p.distanceTo(m),g=l?l.length:c.length,f=this.result;for(let w=0;!f.shouldStop&&w<g;w++){const x=l?l[w]:w,b=c[x],B=d[x],F=e,P=s;a.copy(u[b[0]]),F.vmult(a,a),a.vadd(P,a),a.vsub(p,a),F.vmult(B,r);const W=y.dot(r);if(Math.abs(W)<this.precision)continue;const q=r.dot(a)/W;if(!(q<0)){y.scale(q,J),J.vadd(p,J),tt.copy(u[b[0]]),F.vmult(tt,tt),P.vadd(tt,tt);for(let N=1;!f.shouldStop&&N<b.length-1;N++){it.copy(u[b[N]]),ot.copy(u[b[N+1]]),F.vmult(it,it),F.vmult(ot,ot),P.vadd(it,it),P.vadd(ot,ot);const T=J.distanceTo(p);!(Y.pointInTriangle(J,tt,it,ot)||Y.pointInTriangle(J,it,tt,ot))||T>v||this.reportIntersection(r,J,o,i,x)}}}}_intersectTrimesh(t,e,s,i,o,n){const r=Fs,a=qs,l=Ns,c=me,u=Ts,d=Is,y=Rs,p=Ps,m=Ms,v=t.indices;t.vertices;const g=this.from,f=this.to,w=this.direction;l.position.copy(s),l.quaternion.copy(e),O.vectorToLocalFrame(s,e,w,u),O.pointToLocalFrame(s,e,g,d),O.pointToLocalFrame(s,e,f,y),y.x*=t.scale.x,y.y*=t.scale.y,y.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,y.vsub(d,u),u.normalize();const x=d.distanceSquared(y);t.tree.rayQuery(this,l,a);for(let b=0,B=a.length;!this.result.shouldStop&&b!==B;b++){const F=a[b];t.getNormal(F,r),t.getVertex(v[F*3],tt),tt.vsub(d,c);const P=u.dot(r),W=r.dot(c)/P;if(W<0)continue;u.scale(W,J),J.vadd(d,J),t.getVertex(v[F*3+1],it),t.getVertex(v[F*3+2],ot);const q=J.distanceSquared(d);!(Y.pointInTriangle(J,it,tt,ot)||Y.pointInTriangle(J,tt,it,ot))||q>x||(O.vectorToWorldFrame(e,r,m),O.pointToWorldFrame(s,e,J,p),this.reportIntersection(m,p,o,i,F))}a.length=0}reportIntersection(t,e,s,i,o){const n=this.from,r=this.to,a=n.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof o<"u"?o:-1,this.mode){case Y.ALL:this.hasHit=!0,l.set(n,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case Y.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a));break;case Y.ANY:this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,i){i.vsub(e,bt),s.vsub(e,Ft),t.vsub(e,_t);const o=bt.dot(bt),n=bt.dot(Ft),r=bt.dot(_t),a=Ft.dot(Ft),l=Ft.dot(_t);let c,u;return(c=a*r-n*l)>=0&&(u=o*l-n*r)>=0&&c+u<o*a-n*n}}Y.CLOSEST=ne.CLOSEST;Y.ANY=ne.ANY;Y.ALL=ne.ALL;const pe=new U,Qt=[],Ft=new h,_t=new h,bs=new h,As=new D,J=new h,tt=new h,it=new h,ot=new h;new h;new qt;const ye={faceList:[0]},Lt=new h,Bs=new Y,Es=[],Ss=new h,Cs=new h,zs=new h;new h;new h;const me=new h,Fs=new h,Ts=new h,Is=new h,Rs=new h,Ms=new h,Ps=new h;new U;const qs=[],Ns=new O,bt=new h,Wt=new h;function Ls(E,t,e){e.vsub(E,bt);const s=bt.dot(t);return t.scale(s,Wt),Wt.vadd(E,Wt),e.distanceTo(Wt)}class Mt extends oe{static checkBounds(t,e,s){let i,o;s===0?(i=t.position.x,o=e.position.x):s===1?(i=t.position.y,o=e.position.y):s===2&&(i=t.position.z,o=e.position.z);const n=t.boundingRadius,r=e.boundingRadius,a=i+n;return o-r<a}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let o;for(o=e-1;o>=0&&!(t[o].aabb.lowerBound.x<=i.aabb.lowerBound.x);o--)t[o+1]=t[o];t[o+1]=i}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let o;for(o=e-1;o>=0&&!(t[o].aabb.lowerBound.y<=i.aabb.lowerBound.y);o--)t[o+1]=t[o];t[o+1]=i}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let o;for(o=e-1;o>=0&&!(t[o].aabb.lowerBound.z<=i.aabb.lowerBound.z);o--)t[o+1]=t[o];t[o+1]=i}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const i=e.indexOf(s.body);i!==-1&&e.splice(i,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,o=i.length,n=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==o;r++){const l=i[r];for(a=r+1;a<o;a++){const c=i[a];if(this.needBroadphaseCollision(l,c)){if(!Mt.checkBounds(l,c,n))break;this.intersectionTest(l,c,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let i=0;i!==s;i++){const o=t[i];o.aabbNeedsUpdate&&o.updateAABB()}e===0?Mt.insertionSortX(t):e===1?Mt.insertionSortY(t):e===2&&Mt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,o=0,n=0;const r=this.axisList,a=r.length,l=1/a;for(let y=0;y!==a;y++){const p=r[y],m=p.position.x;t+=m,e+=m*m;const v=p.position.y;s+=v,i+=v*v;const g=p.position.z;o+=g,n+=g*g}const c=e-t*t*l,u=i-s*s*l,d=n-o*o*l;c>u?c>d?this.axisIndex=0:this.axisIndex=2:u>d?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let o="x";i===1&&(o="y"),i===2&&(o="z");const n=this.axisList;e.lowerBound[o],e.upperBound[o];for(let r=0;r<n.length;r++){const a=n[r];a.aabbNeedsUpdate&&a.updateAABB(),a.aabb.overlaps(e)&&s.push(a)}return s}}class Xt{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Nt{constructor(t,e,s){s===void 0&&(s={}),s=Xt.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Nt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Nt.idCounter=0;class ve{constructor(){this.spatial=new h,this.rotational=new h}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class ft{constructor(t,e,s,i){s===void 0&&(s=-1e6),i===void 0&&(i=1e6),this.id=ft.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ve,this.jacobianElementB=new ve,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,o=t,n=s;this.a=4/(n*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(n*n*o*(1+4*i))}computeB(t,e,s){const i=this.computeGW(),o=this.computeGq(),n=this.computeGiMf();return-o*t-i*e-n*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.position,n=i.position;return t.spatial.dot(o)+e.spatial.dot(n)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.velocity,n=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.vlambda,n=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.force,n=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,c=i.invMassSolve;return o.scale(l,fe),r.scale(c,ge),s.invInertiaWorldSolve.vmult(n,we),i.invInertiaWorldSolve.vmult(a,xe),t.multiplyVectors(fe,we)+e.multiplyVectors(ge,xe)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.invMassSolve,n=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=o+n;return r.vmult(t.rotational,Vt),l+=Vt.dot(t.rotational),a.vmult(e.rotational,Vt),l+=Vt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,o=this.bj,n=Ws;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*t,s.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,n),i.wlambda.addScaledVector(t,n,i.wlambda),o.invInertiaWorldSolve.vmult(s.rotational,n),o.wlambda.addScaledVector(t,n,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}ft.idCounter=0;const fe=new h,ge=new h,we=new h,xe=new h,Vt=new h,Ws=new h;class Pt extends ft{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new h,this.rj=new h,this.ni=new h}computeB(t){const e=this.a,s=this.b,i=this.bi,o=this.bj,n=this.ri,r=this.rj,a=Vs,l=js,c=i.velocity,u=i.angularVelocity;i.force,i.torque;const d=o.velocity,y=o.angularVelocity;o.force,o.torque;const p=Os,m=this.jacobianElementA,v=this.jacobianElementB,g=this.ni;n.cross(g,a),r.cross(g,l),g.negate(m.spatial),a.negate(m.rotational),v.spatial.copy(g),v.rotational.copy(l),p.copy(o.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(n,p);const f=g.dot(p),w=this.restitution+1,x=w*d.dot(g)-w*c.dot(g)+y.dot(l)-u.dot(a),b=this.computeGiMf();return-f*e-x*s-t*b}getImpactVelocityAlongNormal(){const t=ks,e=Hs,s=Us,i=Ds,o=Gs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,o),this.ni.dot(o)}}const Vs=new h,js=new h,Os=new h,ks=new h,Hs=new h,Us=new h,Ds=new h,Gs=new h;class re extends Nt{constructor(t,e,s,i,o){e===void 0&&(e=new h),i===void 0&&(i=new h),o===void 0&&(o=1e6),super(t,s),this.pivotA=e.clone(),this.pivotB=i.clone();const n=this.equationX=new Pt(t,s),r=this.equationY=new Pt(t,s),a=this.equationZ=new Pt(t,s);this.equations.push(n,r,a),n.minForce=r.minForce=a.minForce=-o,n.maxForce=r.maxForce=a.maxForce=o,n.ni.set(1,0,0),r.ni.set(0,1,0),a.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,i=this.equationY,o=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),o.ri.copy(s.ri),o.rj.copy(s.rj)}}class Xs extends ft{constructor(t,e,s){s===void 0&&(s={});const i=typeof s.maxForce<"u"?s.maxForce:1e6;super(t,e,-i,i),this.axisA=s.axisA?s.axisA.clone():new h(1,0,0),this.axisB=s.axisB?s.axisB.clone():new h(0,1,0),this.angle=typeof s.angle<"u"?s.angle:0}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=Ys,r=$s,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);const c=Math.cos(this.angle)-i.dot(o),u=this.computeGW(),d=this.computeGiMf();return-c*e-u*s-t*d}}const Ys=new h,$s=new h;class zt extends ft{constructor(t,e,s){s===void 0&&(s={});const i=typeof s.maxForce<"u"?s.maxForce:1e6;super(t,e,-i,i),this.axisA=s.axisA?s.axisA.clone():new h(1,0,0),this.axisB=s.axisB?s.axisB.clone():new h(0,1,0),this.maxAngle=Math.PI/2}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=Ks,r=Zs,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);const c=Math.cos(this.maxAngle)-i.dot(o),u=this.computeGW(),d=this.computeGiMf();return-c*e-u*s-t*d}}const Ks=new h,Zs=new h;class On extends re{constructor(t,e,s){s===void 0&&(s={});const i=typeof s.maxForce<"u"?s.maxForce:1e6,o=s.pivotA?s.pivotA.clone():new h,n=s.pivotB?s.pivotB.clone():new h;super(t,o,e,n,i),this.axisA=s.axisA?s.axisA.clone():new h,this.axisB=s.axisB?s.axisB.clone():new h,this.collideConnected=!!s.collideConnected,this.angle=typeof s.angle<"u"?s.angle:0;const r=this.coneEquation=new Xs(t,e,s),a=this.twistEquation=new zt(t,e,s);this.twistAngle=typeof s.twistAngle<"u"?s.twistAngle:0,r.maxForce=0,r.minForce=-i,a.maxForce=0,a.minForce=-i,this.equations.push(r,a)}update(){const t=this.bodyA,e=this.bodyB,s=this.coneEquation,i=this.twistEquation;super.update(),t.vectorToWorldFrame(this.axisA,s.axisA),e.vectorToWorldFrame(this.axisB,s.axisB),this.axisA.tangents(i.axisA,i.axisA),t.vectorToWorldFrame(i.axisA,i.axisA),this.axisB.tangents(i.axisB,i.axisB),e.vectorToWorldFrame(i.axisB,i.axisB),s.angle=this.angle,i.maxAngle=this.twistAngle}}new h;new h;class kn extends Nt{constructor(t,e,s,i){i===void 0&&(i=1e6),super(t,e),typeof s>"u"&&(s=t.position.distanceTo(e.position)),this.distance=s;const o=this.distanceEquation=new Pt(t,e);this.equations.push(o),o.minForce=-i,o.maxForce=i}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,i=this.distance*.5,o=s.ni;e.position.vsub(t.position,o),o.normalize(),o.scale(i,s.ri),o.scale(-i,s.rj)}}class Hn extends re{constructor(t,e,s){s===void 0&&(s={});const i=typeof s.maxForce<"u"?s.maxForce:1e6,o=new h,n=new h,r=new h;t.position.vadd(e.position,r),r.scale(.5,r),e.pointToLocalFrame(r,n),t.pointToLocalFrame(r,o),super(t,o,e,n,i),this.xA=t.vectorToLocalFrame(h.UNIT_X),this.xB=e.vectorToLocalFrame(h.UNIT_X),this.yA=t.vectorToLocalFrame(h.UNIT_Y),this.yB=e.vectorToLocalFrame(h.UNIT_Y),this.zA=t.vectorToLocalFrame(h.UNIT_Z),this.zB=e.vectorToLocalFrame(h.UNIT_Z);const a=this.rotationalEquation1=new zt(t,e,s),l=this.rotationalEquation2=new zt(t,e,s),c=this.rotationalEquation3=new zt(t,e,s);this.equations.push(a,l,c)}update(){const t=this.bodyA,e=this.bodyB;this.motorEquation;const s=this.rotationalEquation1,i=this.rotationalEquation2,o=this.rotationalEquation3;super.update(),t.vectorToWorldFrame(this.xA,s.axisA),e.vectorToWorldFrame(this.yB,s.axisB),t.vectorToWorldFrame(this.yA,i.axisA),e.vectorToWorldFrame(this.zB,i.axisB),t.vectorToWorldFrame(this.zA,o.axisA),e.vectorToWorldFrame(this.xB,o.axisB)}}new h;new h;class Qs extends ft{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,-s,s),this.axisA=new h,this.axisB=new h,this.targetVelocity=0}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.axisA,i=this.axisB,o=this.jacobianElementA,n=this.jacobianElementB;o.rotational.copy(s),i.negate(n.rotational);const r=this.computeGW()-this.targetVelocity,a=this.computeGiMf();return-r*e-t*a}}class _s extends re{constructor(t,e,s){s===void 0&&(s={});const i=typeof s.maxForce<"u"?s.maxForce:1e6,o=s.pivotA?s.pivotA.clone():new h,n=s.pivotB?s.pivotB.clone():new h;super(t,o,e,n,i),(this.axisA=s.axisA?s.axisA.clone():new h(1,0,0)).normalize(),(this.axisB=s.axisB?s.axisB.clone():new h(1,0,0)).normalize(),this.collideConnected=!!s.collideConnected;const r=this.rotationalEquation1=new zt(t,e,s),a=this.rotationalEquation2=new zt(t,e,s),l=this.motorEquation=new Qs(t,e,i);l.enabled=!1,this.equations.push(r,a,l)}enableMotor(){this.motorEquation.enabled=!0}disableMotor(){this.motorEquation.enabled=!1}setMotorSpeed(t){this.motorEquation.targetVelocity=t}setMotorMaxForce(t){this.motorEquation.maxForce=t,this.motorEquation.minForce=-t}update(){const t=this.bodyA,e=this.bodyB,s=this.motorEquation,i=this.rotationalEquation1,o=this.rotationalEquation2,n=Js,r=ti,a=this.axisA,l=this.axisB;super.update(),t.quaternion.vmult(a,n),e.quaternion.vmult(l,r),n.tangents(i.axisA,o.axisA),i.axisB.copy(r),o.axisB.copy(r),this.motorEquation.enabled&&(t.quaternion.vmult(this.axisA,s.axisA),e.quaternion.vmult(this.axisB,s.axisB))}}const Js=new h,ti=new h;class be extends ft{constructor(t,e,s){super(t,e,-s,s),this.ri=new h,this.rj=new h,this.t=new h}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,o=ei,n=si,r=this.t;s.cross(r,o),i.cross(r,n);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),o.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(n);const c=this.computeGW(),u=this.computeGiMf();return-c*e-t*u}}const ei=new h,si=new h;class Yt{constructor(t,e,s){s=Xt.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Yt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Yt.idCounter=0;class $t{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=$t.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}$t.idCounter=0;class Un{constructor(t,e,s){s===void 0&&(s={}),this.restLength=typeof s.restLength=="number"?s.restLength:1,this.stiffness=s.stiffness||100,this.damping=s.damping||1,this.bodyA=t,this.bodyB=e,this.localAnchorA=new h,this.localAnchorB=new h,s.localAnchorA&&this.localAnchorA.copy(s.localAnchorA),s.localAnchorB&&this.localAnchorB.copy(s.localAnchorB),s.worldAnchorA&&this.setWorldAnchorA(s.worldAnchorA),s.worldAnchorB&&this.setWorldAnchorB(s.worldAnchorB)}setWorldAnchorA(t){this.bodyA.pointToLocalFrame(t,this.localAnchorA)}setWorldAnchorB(t){this.bodyB.pointToLocalFrame(t,this.localAnchorB)}getWorldAnchorA(t){this.bodyA.pointToWorldFrame(this.localAnchorA,t)}getWorldAnchorB(t){this.bodyB.pointToWorldFrame(this.localAnchorB,t)}applyForce(){const t=this.stiffness,e=this.damping,s=this.restLength,i=this.bodyA,o=this.bodyB,n=ii,r=oi,a=ni,l=ri,c=pi,u=ai,d=li,y=hi,p=ci,m=di,v=ui;this.getWorldAnchorA(u),this.getWorldAnchorB(d),u.vsub(i.position,y),d.vsub(o.position,p),d.vsub(u,n);const g=n.length();r.copy(n),r.normalize(),o.velocity.vsub(i.velocity,a),o.angularVelocity.cross(p,c),a.vadd(c,a),i.angularVelocity.cross(y,c),a.vsub(c,a),r.scale(-t*(g-s)-e*a.dot(r),l),i.force.vsub(l,i.force),o.force.vadd(l,o.force),y.cross(l,m),p.cross(l,v),i.torque.vsub(m,i.torque),o.torque.vadd(v,o.torque)}}const ii=new h,oi=new h,ni=new h,ri=new h,ai=new h,li=new h,hi=new h,ci=new h,di=new h,ui=new h,pi=new h;class yi{constructor(t){t===void 0&&(t={}),t=Xt.defaults(t,{chassisConnectionPointLocal:new h,chassisConnectionPointWorld:new h,directionLocal:new h,directionWorld:new h,axleLocal:new h,axleWorld:new h,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new qt,this.worldTransform=new O,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,Be),t.getVelocityAtWorldPoint(Be,Ae);const i=e.hitNormalWorld.dot(Ae);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=1/.1;else{const o=-1/s;this.suspensionRelativeVelocity=i*o,this.clippedInvContactDotSuspension=o}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const Ae=new h,Be=new h;class Dn{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=typeof t.indexRightAxis<"u"?t.indexRightAxis:2,this.indexForwardAxis=typeof t.indexForwardAxis<"u"?t.indexForwardAxis:0,this.indexUpAxis=typeof t.indexUpAxis<"u"?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){t===void 0&&(t={});const e=new yi(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(t===0?1:0,t===1?1:0,t===2?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,i=this.chassisBody;for(let u=0;u<s;u++)this.updateWheelTransform(u);this.currentVehicleSpeedKmHour=3.6*i.velocity.length();const o=new h;this.getVehicleAxisWorld(this.indexForwardAxis,o),o.dot(i.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let u=0;u<s;u++)this.castRay(e[u]);this.updateSuspension(t);const n=new h,r=new h;for(let u=0;u<s;u++){const d=e[u];let y=d.suspensionForce;y>d.maxSuspensionForce&&(y=d.maxSuspensionForce),d.raycastResult.hitNormalWorld.scale(y*t,n),d.raycastResult.hitPointWorld.vsub(i.position,r),i.applyImpulse(n,r)}this.updateFriction(t);const a=new h,l=new h,c=new h;for(let u=0;u<s;u++){const d=e[u];i.getVelocityAtWorldPoint(d.chassisConnectionPointWorld,c);let y=1;switch(this.indexUpAxis){case 1:y=-1;break}if(d.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,l);const p=l.dot(d.raycastResult.hitNormalWorld);d.raycastResult.hitNormalWorld.scale(p,a),l.vsub(a,l);const m=l.dot(c);d.deltaRotation=y*m*t/d.radius}(d.sliding||!d.isInContact)&&d.engineForce!==0&&d.useCustomSlidingRotationalSpeed&&(d.deltaRotation=(d.engineForce>0?1:-1)*d.customSlidingRotationalSpeed*t),Math.abs(d.brake)>Math.abs(d.engineForce)&&(d.deltaRotation=0),d.rotation+=d.deltaRotation,d.deltaRotation*=.99}}updateSuspension(t){const e=this.chassisBody.mass,s=this.wheelInfos,i=s.length;for(let o=0;o<i;o++){const n=s[o];if(n.isInContact){let r;const a=n.suspensionRestLength,l=n.suspensionLength,c=a-l;r=n.suspensionStiffness*c*n.clippedInvContactDotSuspension;const u=n.suspensionRelativeVelocity;let d;u<0?d=n.dampingCompression:d=n.dampingRelaxation,r-=d*u,n.suspensionForce=r*e,n.suspensionForce<0&&(n.suspensionForce=0)}else n.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=gi,s=wi;this.updateWheelTransformWorld(t);const i=this.chassisBody;let o=-1;const n=t.suspensionRestLength+t.radius;t.directionWorld.scale(n,e);const r=t.chassisConnectionPointWorld;r.vadd(e,s);const a=t.raycastResult;a.reset();const l=i.collisionResponse;i.collisionResponse=!1,this.world.rayTest(r,s,a),i.collisionResponse=l;const c=a.body;if(t.raycastResult.groundObject=0,c){o=a.distance,t.raycastResult.hitNormalWorld=a.hitNormalWorld,t.isInContact=!0;const u=a.distance;t.suspensionLength=u-t.radius;const d=t.suspensionRestLength-t.maxSuspensionTravel,y=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<d&&(t.suspensionLength=d),t.suspensionLength>y&&(t.suspensionLength=y,t.raycastResult.reset());const p=t.raycastResult.hitNormalWorld.dot(t.directionWorld),m=new h;i.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,m);const v=t.raycastResult.hitNormalWorld.dot(m);if(p>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=1/.1;else{const g=-1/p;t.suspensionRelativeVelocity=v*g,t.clippedInvContactDotSuspension=g}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return o}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=mi,s=vi,i=fi,o=this.wheelInfos[t];this.updateWheelTransformWorld(o),o.directionLocal.scale(-1,e),s.copy(o.axleLocal),e.cross(s,i),i.normalize(),s.normalize();const n=o.steering,r=new D;r.setFromAxisAngle(e,n);const a=new D;a.setFromAxisAngle(s,o.rotation);const l=o.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,l),l.mult(a,l),l.normalize();const c=o.worldTransform.position;c.copy(o.directionWorld),c.scale(o.suspensionLength,c),c.vadd(o.chassisConnectionPointWorld,c)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=bi,s=this.wheelInfos,i=s.length,o=this.chassisBody,n=Bi,r=Ai;this.numWheelsOnGround=0;for(let c=0;c<i;c++){const u=s[c];u.raycastResult.body&&this.numWheelsOnGround++,u.sideImpulse=0,u.forwardImpulse=0,n[c]||(n[c]=new h),r[c]||(r[c]=new h)}for(let c=0;c<i;c++){const u=s[c],d=u.raycastResult.body;if(d){const y=r[c];this.getWheelTransformWorld(c).vectorToWorldFrame(xi[this.indexRightAxis],y);const p=u.raycastResult.hitNormalWorld,m=y.dot(p);p.scale(m,e),y.vsub(e,y),y.normalize(),p.cross(y,n[c]),n[c].normalize(),u.sideImpulse=Li(o,u.raycastResult.hitPointWorld,d,u.raycastResult.hitPointWorld,y),u.sideImpulse*=Ei}}const a=1,l=.5;this.sliding=!1;for(let c=0;c<i;c++){const u=s[c],d=u.raycastResult.body;let y=0;if(u.slipInfo=1,d){const p=u.brake?u.brake:0;y=Fi(o,d,u.raycastResult.hitPointWorld,n[c],p),y+=u.engineForce*t;const m=p/y;u.slipInfo*=m}if(u.forwardImpulse=0,u.skidInfo=1,d){u.skidInfo=1;const p=u.suspensionForce*t*u.frictionSlip,m=p*p;u.forwardImpulse=y;const v=u.forwardImpulse*l/u.forwardAcceleration,g=u.sideImpulse*a/u.sideAcceleration,f=v*v+g*g;if(u.sliding=!1,f>m){this.sliding=!0,u.sliding=!0;const w=p/Math.sqrt(f);u.skidInfo*=w}}}if(this.sliding)for(let c=0;c<i;c++){const u=s[c];u.sideImpulse!==0&&u.skidInfo<1&&(u.forwardImpulse*=u.skidInfo,u.sideImpulse*=u.skidInfo)}for(let c=0;c<i;c++){const u=s[c],d=new h;if(u.raycastResult.hitPointWorld.vsub(o.position,d),u.forwardImpulse!==0){const y=new h;n[c].scale(u.forwardImpulse,y),o.applyImpulse(y,d)}if(u.sideImpulse!==0){const y=u.raycastResult.body,p=new h;u.raycastResult.hitPointWorld.vsub(y.position,p);const m=new h;r[c].scale(u.sideImpulse,m),o.vectorToLocalFrame(d,d),d["xyz"[this.indexUpAxis]]*=u.rollInfluence,o.vectorToWorldFrame(d,d),o.applyImpulse(m,d),m.scale(-1,m),y.applyImpulse(m,p)}}}}new h;new h;new h;const mi=new h,vi=new h,fi=new h;new Y;new h;const gi=new h,wi=new h,xi=[new h(1,0,0),new h(0,1,0),new h(0,0,1)],bi=new h,Ai=[],Bi=[],Ei=1,Si=new h,Ci=new h,zi=new h;function Fi(E,t,e,s,i){let o=0;const n=e,r=Si,a=Ci,l=zi;E.getVelocityAtWorldPoint(n,r),t.getVelocityAtWorldPoint(n,a),r.vsub(a,l);const c=s.dot(l),u=Ee(E,e,s),d=Ee(t,e,s),y=1/(u+d);return o=-c*y,i<o&&(o=i),o<-i&&(o=-i),o}const Ti=new h,Ii=new h,Ri=new h,Mi=new h;function Ee(E,t,e){const s=Ti,i=Ii,o=Ri,n=Mi;return t.vsub(E.position,s),s.cross(e,i),E.invInertiaWorld.vmult(i,n),n.cross(s,o),E.invMass+e.dot(o)}const Pi=new h,qi=new h,Ni=new h;function Li(E,t,e,s,i){if(i.lengthSquared()>1.1)return 0;const o=Pi,n=qi,r=Ni;E.getVelocityAtWorldPoint(t,o),e.getVelocityAtWorldPoint(s,n),o.vsub(n,r);const a=i.dot(r),l=.2,c=1/(E.invMass+e.invMass);return-l*a*c}class Wi extends z{constructor(t){if(super({type:z.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new h);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,i){const o=this.radius,n=["x","y","z"];for(let r=0;r<n.length;r++){const a=n[r];s[a]=t[a]-o,i[a]=t[a]+o}}}class Gn{constructor(t){t===void 0&&(t={}),this.wheelBodies=[],this.coordinateSystem=typeof t.coordinateSystem<"u"?t.coordinateSystem.clone():new h(1,2,3),t.chassisBody?this.chassisBody=t.chassisBody:this.chassisBody=new R({mass:1,shape:new Gt(new h(5,.5,2))}),this.constraints=[],this.wheelAxes=[],this.wheelForces=[]}addWheel(t){t===void 0&&(t={});let e;t.body?e=t.body:e=new R({mass:1,shape:new Wi(1.2)}),this.wheelBodies.push(e),this.wheelForces.push(0);const s=typeof t.position<"u"?t.position.clone():new h,i=new h;this.chassisBody.pointToWorldFrame(s,i),e.position.set(i.x,i.y,i.z);const o=typeof t.axis<"u"?t.axis.clone():new h(0,0,1);this.wheelAxes.push(o);const n=new _s(this.chassisBody,e,{pivotA:s,axisA:o,pivotB:h.ZERO,axisB:o,collideConnected:!1});return this.constraints.push(n),this.wheelBodies.length-1}setSteeringValue(t,e){const s=this.wheelAxes[e],i=Math.cos(t),o=Math.sin(t),n=s.x,r=s.z;this.constraints[e].axisA.set(-i*n+o*r,0,o*n+i*r)}setMotorSpeed(t,e){const s=this.constraints[e];s.enableMotor(),s.motorTargetVelocity=t}disableMotor(t){this.constraints[t].disableMotor()}setWheelForce(t,e){this.wheelForces[e]=t}applyWheelForce(t,e){const s=this.wheelAxes[e],i=this.wheelBodies[e],o=i.torque;s.scale(t,jt),i.vectorToWorldFrame(jt,jt),o.vadd(jt,o)}addToWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let i=0;i<s.length;i++)t.addBody(s[i]);for(let i=0;i<e.length;i++)t.addConstraint(e[i]);t.addEventListener("preStep",this._update.bind(this))}_update(){const t=this.wheelForces;for(let e=0;e<t.length;e++)this.applyWheelForce(t[e],e)}removeFromWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let i=0;i<s.length;i++)t.removeBody(s[i]);for(let i=0;i<e.length;i++)t.removeConstraint(e[i])}getWheelSpeed(t){const e=this.wheelAxes[t],s=this.wheelBodies[t].angularVelocity;return this.chassisBody.vectorToWorldFrame(e,Se),s.dot(Se)}}const jt=new h,Se=new h;class Xn{constructor(){this.particles=[],this.density=1,this.smoothingRadius=1,this.speedOfSound=1,this.viscosity=.01,this.eps=1e-6,this.pressures=[],this.densities=[],this.neighbors=[]}add(t){this.particles.push(t),this.neighbors.length<this.particles.length&&this.neighbors.push([])}remove(t){const e=this.particles.indexOf(t);e!==-1&&(this.particles.splice(e,1),this.neighbors.length>this.particles.length&&this.neighbors.pop())}getNeighbors(t,e){const s=this.particles.length,i=t.id,o=this.smoothingRadius*this.smoothingRadius,n=Vi;for(let r=0;r!==s;r++){const a=this.particles[r];a.position.vsub(t.position,n),i!==a.id&&n.lengthSquared()<o&&e.push(a)}}update(){const t=this.particles.length,e=ji,s=this.speedOfSound,i=this.eps;for(let c=0;c!==t;c++){const u=this.particles[c],d=this.neighbors[c];d.length=0,this.getNeighbors(u,d),d.push(this.particles[c]);const y=d.length;let p=0;for(let m=0;m!==y;m++){u.position.vsub(d[m].position,e);const v=e.length(),g=this.w(v);p+=d[m].mass*g}this.densities[c]=p,this.pressures[c]=s*s*(this.densities[c]-this.density)}const o=Oi,n=ki,r=Hi,a=Ui,l=Di;for(let c=0;c!==t;c++){const u=this.particles[c];o.set(0,0,0),n.set(0,0,0);let d,y;const p=this.neighbors[c],m=p.length;for(let v=0;v!==m;v++){const g=p[v];u.position.vsub(g.position,a);const f=a.length();d=-g.mass*(this.pressures[c]/(this.densities[c]*this.densities[c]+i)+this.pressures[v]/(this.densities[v]*this.densities[v]+i)),this.gradw(a,r),r.scale(d,r),o.vadd(r,o),g.velocity.vsub(u.velocity,l),l.scale(1/(1e-4+this.densities[c]*this.densities[v])*this.viscosity*g.mass,l),y=this.nablaw(f),l.scale(y,l),n.vadd(l,n)}n.scale(u.mass,n),o.scale(u.mass,o),u.force.vadd(n,u.force),u.force.vadd(o,u.force)}}w(t){const e=this.smoothingRadius;return 315/(64*Math.PI*e**9)*(e*e-t*t)**3}gradw(t,e){const s=t.length(),i=this.smoothingRadius;t.scale(945/(32*Math.PI*i**9)*(i*i-s*s)**2,e)}nablaw(t){const e=this.smoothingRadius;return 945/(32*Math.PI*e**9)*(e*e-t*t)*(7*t*t-3*e*e)}}const Vi=new h,ji=new h,Oi=new h,ki=new h,Hi=new h,Ui=new h,Di=new h;class Yn extends vt{constructor(t,e,s,i){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),i===void 0&&(i=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const o=i,n=[],r=[],a=[],l=[],c=[],u=Math.cos,d=Math.sin;n.push(new h(-e*d(0),-s*.5,e*u(0))),l.push(0),n.push(new h(-t*d(0),s*.5,t*u(0))),c.push(1);for(let p=0;p<o;p++){const m=2*Math.PI/o*(p+1),v=2*Math.PI/o*(p+.5);p<o-1?(n.push(new h(-e*d(m),-s*.5,e*u(m))),l.push(2*p+2),n.push(new h(-t*d(m),s*.5,t*u(m))),c.push(2*p+3),a.push([2*p,2*p+1,2*p+3,2*p+2])):a.push([2*p,2*p+1,1,0]),(o%2===1||p<o/2)&&r.push(new h(-d(v),0,u(v)))}a.push(l),r.push(new h(0,1,0));const y=[];for(let p=0;p<c.length;p++)y.push(c[c.length-p-1]);a.push(y),super({vertices:n,faces:a,axes:r}),this.type=z.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=i}}class $n extends z{constructor(){super({type:z.types.PARTICLE})}calculateLocalInertia(t,e){return e===void 0&&(e=new h),e.set(0,0,0),e}volume(){return 0}updateBoundingSphereRadius(){this.boundingSphereRadius=0}calculateWorldAABB(t,e,s,i){s.copy(t),i.copy(t)}}class Kn extends z{constructor(){super({type:z.types.PLANE}),this.worldNormal=new h,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new h),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){ct.set(0,0,1),e.vmult(ct,ct);const o=Number.MAX_VALUE;s.set(-o,-o,-o),i.set(o,o,o),ct.x===1?i.x=t.x:ct.x===-1&&(s.x=t.x),ct.y===1?i.y=t.y:ct.y===-1&&(s.y=t.y),ct.z===1?i.z=t.z:ct.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const ct=new h;class Zn extends z{constructor(t,e){e===void 0&&(e={}),e=Xt.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:z.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,e.minValue===null&&this.updateMinValue(),e.maxValue===null&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new vt,this.pillarOffset=new h,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o<e&&(e=o)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o>e&&(e=o)}this.maxValue=e}setHeightValueAtIndex(t,e,s){const i=this.data;i[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,i,o){o===void 0&&(o=[]);const n=this.data;let r=this.minValue;for(let a=t;a<=s;a++)for(let l=e;l<=i;l++){const c=n[a][l];c>r&&(r=c)}o[0]=this.minValue,o[1]=r}getIndexOfPosition(t,e,s,i){const o=this.elementSize,n=this.data;let r=Math.floor(t/o),a=Math.floor(e/o);return s[0]=r,s[1]=a,i&&(r<0&&(r=0),a<0&&(a=0),r>=n.length-1&&(r=n.length-1),a>=n[0].length-1&&(a=n[0].length-1)),!(r<0||a<0||r>=n.length-1||a>=n[0].length-1)}getTriangleAt(t,e,s,i,o,n){const r=Ce;this.getIndexOfPosition(t,e,r,s);let a=r[0],l=r[1];const c=this.data;s&&(a=Math.min(c.length-2,Math.max(0,a)),l=Math.min(c[0].length-2,Math.max(0,l)));const u=this.elementSize,d=(t/u-a)**2+(e/u-l)**2,y=(t/u-(a+1))**2+(e/u-(l+1))**2,p=d>y;return this.getTriangle(a,l,p,i,o,n),p}getNormalAt(t,e,s,i){const o=$i,n=Ki,r=Zi,a=Qi,l=_i;this.getTriangleAt(t,e,s,o,n,r),n.vsub(o,a),r.vsub(o,l),a.cross(l,i),i.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:i,upperBound:o}=s;const n=this.data,r=this.elementSize;i.set(t*r,e*r,n[t][e]),o.set((t+1)*r,(e+1)*r,n[t+1][e+1])}getHeightAt(t,e,s){const i=this.data,o=Gi,n=Xi,r=Yi,a=Ce;this.getIndexOfPosition(t,e,a,s);let l=a[0],c=a[1];s&&(l=Math.min(i.length-2,Math.max(0,l)),c=Math.min(i[0].length-2,Math.max(0,c)));const u=this.getTriangleAt(t,e,s,o,n,r);Ji(t,e,o.x,o.y,n.x,n.y,r.x,r.y,ze);const d=ze;return u?i[l+1][c+1]*d.x+i[l][c+1]*d.y+i[l+1][c]*d.z:i[l][c]*d.x+i[l+1][c]*d.y+i[l][c+1]*d.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,i,o){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:i,offset:o}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,i,o,n){const r=this.data,a=this.elementSize;s?(i.set((t+1)*a,(e+1)*a,r[t+1][e+1]),o.set(t*a,(e+1)*a,r[t][e+1]),n.set((t+1)*a,e*a,r[t+1][e])):(i.set(t*a,e*a,r[t][e]),o.set((t+1)*a,e*a,r[t+1][e]),n.set(t*a,(e+1)*a,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let i=this.pillarConvex,o=this.pillarOffset;if(this.cacheEnabled){const u=this.getCachedConvexTrianglePillar(t,e,s);if(u){this.pillarConvex=u.convex,this.pillarOffset=u.offset;return}i=new vt,o=new h,this.pillarConvex=i,this.pillarOffset=o}const n=this.data,r=this.elementSize,a=i.faces;i.vertices.length=6;for(let u=0;u<6;u++)i.vertices[u]||(i.vertices[u]=new h);a.length=5;for(let u=0;u<5;u++)a[u]||(a[u]=[]);const l=i.vertices,c=(Math.min(n[t][e],n[t+1][e],n[t][e+1],n[t+1][e+1])-this.minValue)/2+this.minValue;s?(o.set((t+.75)*r,(e+.75)*r,c),l[0].set(.25*r,.25*r,n[t+1][e+1]-c),l[1].set(-.75*r,.25*r,n[t][e+1]-c),l[2].set(.25*r,-.75*r,n[t+1][e]-c),l[3].set(.25*r,.25*r,-Math.abs(c)-1),l[4].set(-.75*r,.25*r,-Math.abs(c)-1),l[5].set(.25*r,-.75*r,-Math.abs(c)-1),a[0][0]=0,a[0][1]=1,a[0][2]=2,a[1][0]=5,a[1][1]=4,a[1][2]=3,a[2][0]=2,a[2][1]=5,a[2][2]=3,a[2][3]=0,a[3][0]=3,a[3][1]=4,a[3][2]=1,a[3][3]=0,a[4][0]=1,a[4][1]=4,a[4][2]=5,a[4][3]=2):(o.set((t+.25)*r,(e+.25)*r,c),l[0].set(-.25*r,-.25*r,n[t][e]-c),l[1].set(.75*r,-.25*r,n[t+1][e]-c),l[2].set(-.25*r,.75*r,n[t][e+1]-c),l[3].set(-.25*r,-.25*r,-Math.abs(c)-1),l[4].set(.75*r,-.25*r,-Math.abs(c)-1),l[5].set(-.25*r,.75*r,-Math.abs(c)-1),a[0][0]=0,a[0][1]=1,a[0][2]=2,a[1][0]=5,a[1][1]=4,a[1][2]=3,a[2][0]=0,a[2][1]=2,a[2][2]=5,a[2][3]=3,a[3][0]=1,a[3][1]=0,a[3][2]=3,a[3][3]=4,a[4][0]=4,a[4][1]=5,a[4][2]=2,a[4][3]=1),i.computeNormals(),i.computeEdges(),i.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,i,o)}calculateLocalInertia(t,e){return e===void 0&&(e=new h),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),i.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new h(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:i,y:o}=e,n=document.createElement("canvas");n.width=t.width,n.height=t.height;const r=n.getContext("2d");r.drawImage(t,0,0);const a=r.getImageData(0,0,t.width,t.height),l=this.data;l.length=0,this.elementSize=Math.abs(s)/a.width;for(let c=0;c<a.height;c++){const u=[];for(let d=0;d<a.width;d++){const y=a.data[(c*a.height+d)*4],p=a.data[(c*a.height+d)*4+1],m=a.data[(c*a.height+d)*4+2],v=(y+p+m)/4/255*i;s<0?u.push(v):u.unshift(v)}o<0?l.unshift(u):l.push(u)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const Ce=[],ze=new h,Gi=new h,Xi=new h,Yi=new h,$i=new h,Ki=new h,Zi=new h,Qi=new h,_i=new h;function Ji(E,t,e,s,i,o,n,r,a){a.x=((o-r)*(E-n)+(n-i)*(t-r))/((o-r)*(e-n)+(n-i)*(s-r)),a.y=((r-s)*(E-n)+(e-n)*(t-r))/((o-r)*(e-n)+(n-i)*(s-r)),a.z=1-a.x-a.y}class nt{constructor(t){t===void 0&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new U,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){s===void 0&&(s=0);const i=this.data;if(!this.aabb.contains(t))return!1;const o=this.children,n=this.maxDepth||this.root.maxDepth;if(s<n){let r=!1;o.length||(this.subdivide(),r=!0);for(let a=0;a!==8;a++)if(o[a].insert(t,e,s+1))return!0;r&&(o.length=0)}return i.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,i=this.children;i.push(new nt({aabb:new U({lowerBound:new h(0,0,0)})}),new nt({aabb:new U({lowerBound:new h(1,0,0)})}),new nt({aabb:new U({lowerBound:new h(1,1,0)})}),new nt({aabb:new U({lowerBound:new h(1,1,1)})}),new nt({aabb:new U({lowerBound:new h(0,1,1)})}),new nt({aabb:new U({lowerBound:new h(0,0,1)})}),new nt({aabb:new U({lowerBound:new h(1,0,1)})}),new nt({aabb:new U({lowerBound:new h(0,1,0)})})),s.vsub(e,gt),gt.scale(.5,gt);const o=this.root||this;for(let n=0;n!==8;n++){const r=i[n];r.root=o;const a=r.aabb.lowerBound;a.x*=gt.x,a.y*=gt.y,a.z*=gt.z,a.vadd(e,a),a.vadd(gt,r.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const i=s.pop();i.aabb.overlaps(t)&&Array.prototype.push.apply(e,i.data),Array.prototype.push.apply(s,i.children)}return e}rayQuery(t,e,s){return t.getAABB(Ot),Ot.toLocalFrame(e,Ot),this.aabbQuery(Ot,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),!this.children[t].children.length&&!this.children[t].data.length&&this.children.splice(t,1)}}class to extends nt{constructor(t,e){e===void 0&&(e={}),super({root:null,aabb:t}),this.maxDepth=typeof e.maxDepth<"u"?e.maxDepth:8}}const gt=new h,Ot=new U;class ee extends z{constructor(t,e){super({type:z.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new U,this.edges=null,this.scale=new h(1,1,1),this.tree=new to,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new U,i=new h,o=new h,n=new h,r=[i,o,n];for(let a=0;a<this.indices.length/3;a++){const l=a*3;this._getUnscaledVertex(this.indices[l],i),this._getUnscaledVertex(this.indices[l+1],o),this._getUnscaledVertex(this.indices[l+2],n),s.setFromPoints(r),t.insert(s,a)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){kt.copy(t);const s=this.scale,i=s.x,o=s.y,n=s.z,r=kt.lowerBound,a=kt.upperBound;return r.x/=i,r.y/=o,r.z/=n,a.x/=i,a.y/=o,a.z/=n,this.tree.aabbQuery(kt,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=eo,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const i=s*3,o=this.indices[i],n=this.indices[i+1],r=this.indices[i+2];this.getVertex(o,Ie),this.getVertex(n,Re),this.getVertex(r,Me),ee.computeNormal(Re,Ie,Me,t),e[i]=t.x,e[i+1]=t.y,e[i+2]=t.z}}updateEdges(){const t={},e=(i,o)=>{const n=i<o?`${i}_${o}`:`${o}_${i}`;t[n]=!0};for(let i=0;i<this.indices.length/3;i++){const o=i*3,n=this.indices[o],r=this.indices[o+1],a=this.indices[o+2];e(n,r),e(r,a),e(a,n)}const s=Object.keys(t);this.edges=new Int16Array(s.length*2);for(let i=0;i<s.length;i++){const o=s[i].split("_");this.edges[2*i]=parseInt(o[0],10),this.edges[2*i+1]=parseInt(o[1],10)}}getEdgeVertex(t,e,s){const i=this.edges[t*2+(e?1:0)];this.getVertex(i,s)}getEdgeVector(t,e){const s=so,i=io;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,i),i.vsub(s,e)}static computeNormal(t,e,s,i){e.vsub(t,Te),s.vsub(e,Fe),Fe.cross(Te,i),i.isZero()||i.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=t*3,i=this.vertices;return e.set(i[s],i[s+1],i[s+2])}getWorldVertex(t,e,s,i){return this.getVertex(t,i),O.pointToWorldFrame(e,s,i,i),i}getTriangleVertices(t,e,s,i){const o=t*3;this.getVertex(this.indices[o],e),this.getVertex(this.indices[o+1],s),this.getVertex(this.indices[o+2],i)}getNormal(t,e){const s=t*3;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(wt);const s=wt.upperBound.x-wt.lowerBound.x,i=wt.upperBound.y-wt.lowerBound.y,o=wt.upperBound.z-wt.lowerBound.z;return e.set(1/12*t*(2*i*2*i+2*o*2*o),1/12*t*(2*s*2*s+2*o*2*o),1/12*t*(2*i*2*i+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,i=this.vertices.length;this.vertices;const o=oo;this.getVertex(0,o),e.copy(o),s.copy(o);for(let n=0;n!==i;n++)this.getVertex(n,o),o.x<e.x?e.x=o.x:o.x>s.x&&(s.x=o.x),o.y<e.y?e.y=o.y:o.y>s.y&&(s.y=o.y),o.z<e.z?e.z=o.z:o.z>s.z&&(s.z=o.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new h;for(let i=0,o=e.length/3;i!==o;i++){this.getVertex(i,s);const n=s.lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=no,n=ro;o.position=t,o.quaternion=e,this.aabb.toWorldFrame(o,n),s.copy(n.lowerBound),i.copy(n.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,i,o){t===void 0&&(t=1),e===void 0&&(e=.5),s===void 0&&(s=8),i===void 0&&(i=6),o===void 0&&(o=Math.PI*2);const n=[],r=[];for(let a=0;a<=s;a++)for(let l=0;l<=i;l++){const c=l/i*o,u=a/s*Math.PI*2,d=(t+e*Math.cos(u))*Math.cos(c),y=(t+e*Math.cos(u))*Math.sin(c),p=e*Math.sin(u);n.push(d,y,p)}for(let a=1;a<=s;a++)for(let l=1;l<=i;l++){const c=(i+1)*a+l-1,u=(i+1)*(a-1)+l-1,d=(i+1)*(a-1)+l,y=(i+1)*a+l;r.push(c,u,y),r.push(u,d,y)}return new ee(n,r)}}const eo=new h,kt=new U,so=new h,io=new h,Fe=new h,Te=new h,Ie=new h,Re=new h,Me=new h,wt=new U,oo=new h,no=new O,ro=new U;class Xe{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class ao extends Xe{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,o=this.tolerance*this.tolerance,n=this.equations,r=n.length,a=e.bodies,l=a.length,c=t;let u,d,y,p,m,v;if(r!==0)for(let x=0;x!==l;x++)a[x].updateSolveMassProperties();const g=ho,f=co,w=lo;g.length=r,f.length=r,w.length=r;for(let x=0;x!==r;x++){const b=n[x];w[x]=0,f[x]=b.computeB(c),g[x]=1/b.computeC()}if(r!==0){for(let B=0;B!==l;B++){const F=a[B],P=F.vlambda,W=F.wlambda;P.set(0,0,0),W.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let B=0;B!==r;B++){const F=n[B];u=f[B],d=g[B],v=w[B],m=F.computeGWlambda(),y=d*(u-m-F.eps*v),v+y<F.minForce?y=F.minForce-v:v+y>F.maxForce&&(y=F.maxForce-v),w[B]+=y,p+=y>0?y:-y,F.addToWlambda(y)}if(p*p<o)break}for(let B=0;B!==l;B++){const F=a[B],P=F.velocity,W=F.angularVelocity;F.vlambda.vmul(F.linearFactor,F.vlambda),P.vadd(F.vlambda,P),F.wlambda.vmul(F.angularFactor,F.wlambda),W.vadd(F.wlambda,W)}let x=n.length;const b=1/c;for(;x--;)n[x].multiplier=w[x]*b}return s}}const lo=[],ho=[],co=[];class Qn extends Xe{constructor(t){for(super(),this.iterations=10,this.tolerance=1e-7,this.subsolver=t,this.nodes=[],this.nodePool=[];this.nodePool.length<128;)this.nodePool.push(this.createNode())}createNode(){return{body:null,children:[],eqs:[],visited:!1}}solve(t,e){const s=uo,i=this.nodePool,o=e.bodies,n=this.equations,r=n.length,a=o.length,l=this.subsolver;for(;i.length<a;)i.push(this.createNode());s.length=a;for(let p=0;p<a;p++)s[p]=i[p];for(let p=0;p!==a;p++){const m=s[p];m.body=o[p],m.children.length=0,m.eqs.length=0,m.visited=!1}for(let p=0;p!==r;p++){const m=n[p],v=o.indexOf(m.bi),g=o.indexOf(m.bj),f=s[v],w=s[g];f.children.push(w),f.eqs.push(m),w.children.push(f),w.eqs.push(m)}let c,u=0,d=po;l.tolerance=this.tolerance,l.iterations=this.iterations;const y=yo;for(;c=Ye(s);){d.length=0,y.bodies.length=0,vo(c,fo,y.bodies,d);const p=d.length;d=d.sort(go);for(let m=0;m!==p;m++)l.addEquation(d[m]);l.solve(t,y),l.removeAllEquations(),u++}return u}}const uo=[],po=[],yo={bodies:[]},mo=R.STATIC;function Ye(E){const t=E.length;for(let e=0;e!==t;e++){const s=E[e];if(!s.visited&&!(s.body.type&mo))return s}return!1}const Ht=[];function vo(E,t,e,s){for(Ht.push(E),E.visited=!0,t(E,e,s);Ht.length;){const i=Ht.pop();let o;for(;o=Ye(i.children);)o.visited=!0,t(o,e,s),Ht.push(o)}}function fo(E,t,e){t.push(E.body);const s=E.eqs.length;for(let i=0;i!==s;i++){const o=E.eqs[i];e.includes(o)||e.push(o)}}function go(E,t){return t.id-E.id}class wo{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class xo extends wo{constructor(){super(...arguments),this.type=h}constructObject(){return new h}}const H={sphereSphere:z.types.SPHERE,spherePlane:z.types.SPHERE|z.types.PLANE,boxBox:z.types.BOX|z.types.BOX,sphereBox:z.types.SPHERE|z.types.BOX,planeBox:z.types.PLANE|z.types.BOX,convexConvex:z.types.CONVEXPOLYHEDRON,sphereConvex:z.types.SPHERE|z.types.CONVEXPOLYHEDRON,planeConvex:z.types.PLANE|z.types.CONVEXPOLYHEDRON,boxConvex:z.types.BOX|z.types.CONVEXPOLYHEDRON,sphereHeightfield:z.types.SPHERE|z.types.HEIGHTFIELD,boxHeightfield:z.types.BOX|z.types.HEIGHTFIELD,convexHeightfield:z.types.CONVEXPOLYHEDRON|z.types.HEIGHTFIELD,sphereParticle:z.types.PARTICLE|z.types.SPHERE,planeParticle:z.types.PLANE|z.types.PARTICLE,boxParticle:z.types.BOX|z.types.PARTICLE,convexParticle:z.types.PARTICLE|z.types.CONVEXPOLYHEDRON,cylinderCylinder:z.types.CYLINDER,sphereCylinder:z.types.SPHERE|z.types.CYLINDER,planeCylinder:z.types.PLANE|z.types.CYLINDER,boxCylinder:z.types.BOX|z.types.CYLINDER,convexCylinder:z.types.CONVEXPOLYHEDRON|z.types.CYLINDER,heightfieldCylinder:z.types.HEIGHTFIELD|z.types.CYLINDER,particleCylinder:z.types.PARTICLE|z.types.CYLINDER,sphereTrimesh:z.types.SPHERE|z.types.TRIMESH,planeTrimesh:z.types.PLANE|z.types.TRIMESH};class bo{get[H.sphereSphere](){return this.sphereSphere}get[H.spherePlane](){return this.spherePlane}get[H.boxBox](){return this.boxBox}get[H.sphereBox](){return this.sphereBox}get[H.planeBox](){return this.planeBox}get[H.convexConvex](){return this.convexConvex}get[H.sphereConvex](){return this.sphereConvex}get[H.planeConvex](){return this.planeConvex}get[H.boxConvex](){return this.boxConvex}get[H.sphereHeightfield](){return this.sphereHeightfield}get[H.boxHeightfield](){return this.boxHeightfield}get[H.convexHeightfield](){return this.convexHeightfield}get[H.sphereParticle](){return this.sphereParticle}get[H.planeParticle](){return this.planeParticle}get[H.boxParticle](){return this.boxParticle}get[H.convexParticle](){return this.convexParticle}get[H.cylinderCylinder](){return this.convexConvex}get[H.sphereCylinder](){return this.sphereConvex}get[H.planeCylinder](){return this.planeConvex}get[H.boxCylinder](){return this.boxConvex}get[H.convexCylinder](){return this.convexConvex}get[H.heightfieldCylinder](){return this.heightfieldCylinder}get[H.particleCylinder](){return this.particleCylinder}get[H.sphereTrimesh](){return this.sphereTrimesh}get[H.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new xo,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,o,n){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Pt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,c=i.material||e.material;return l&&c&&l.restitution>=0&&c.restitution>=0&&(r.restitution=l.restitution*c.restitution),r.si=o||s,r.sj=n||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,o=t.si,n=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const c=o.material||s.material,u=n.material||i.material;if(c&&u&&c.friction>=0&&u.friction>=0&&(l=c.friction*u.friction),l>0){const d=l*(r.frictionGravity||r.gravity).length();let y=s.invMass+i.invMass;y>0&&(y=1/y);const p=this.frictionEquationPool,m=p.length?p.pop():new be(s,i,d*y),v=p.length?p.pop():new be(s,i,d*y);return m.bi=v.bi=s,m.bj=v.bj=i,m.minForce=v.minForce=-d*y,m.maxForce=v.maxForce=d*y,m.ri.copy(t.ri),m.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(m.t,v.t),m.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),v.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),m.enabled=v.enabled=t.enabled,e.push(m,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];xt.setZero(),St.setZero(),Ct.setZero();const o=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==o?(xt.vadd(e.ni,xt),St.vadd(e.ri,St),Ct.vadd(e.rj,Ct)):(xt.vsub(e.ni,xt),St.vadd(e.rj,St),Ct.vadd(e.ri,Ct));const n=1/t;St.scale(n,s.ri),Ct.scale(n,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),xt.normalize(),xt.tangents(s.t,i.t)}getContacts(t,e,s,i,o,n,r){this.contactPointPool=o,this.frictionEquationPool=r,this.result=i,this.frictionResult=n;const a=Eo,l=So,c=Ao,u=Bo;for(let d=0,y=t.length;d!==y;d++){const p=t[d],m=e[d];let v=null;p.material&&m.material&&(v=s.getContactMaterial(p.material,m.material)||null);const g=p.type&R.KINEMATIC&&m.type&R.STATIC||p.type&R.STATIC&&m.type&R.KINEMATIC||p.type&R.KINEMATIC&&m.type&R.KINEMATIC;for(let f=0;f<p.shapes.length;f++){p.quaternion.mult(p.shapeOrientations[f],a),p.quaternion.vmult(p.shapeOffsets[f],c),c.vadd(p.position,c);const w=p.shapes[f];for(let x=0;x<m.shapes.length;x++){m.quaternion.mult(m.shapeOrientations[x],l),m.quaternion.vmult(m.shapeOffsets[x],u),u.vadd(m.position,u);const b=m.shapes[x];if(!(w.collisionFilterMask&b.collisionFilterGroup&&b.collisionFilterMask&w.collisionFilterGroup)||c.distanceTo(u)>w.boundingSphereRadius+b.boundingSphereRadius)continue;let B=null;w.material&&b.material&&(B=s.getContactMaterial(w.material,b.material)||null),this.currentContactMaterial=B||v||s.defaultContactMaterial;const F=w.type|b.type,P=this[F];if(P){let W=!1;w.type<b.type?W=P.call(this,w,b,c,u,a,l,p,m,w,b,g):W=P.call(this,b,w,u,c,l,a,m,p,w,b,g),W&&g&&(s.shapeOverlapKeeper.set(w.id,b.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,i,o,n,r,a,l,c,u){if(u)return s.distanceSquared(i)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,a,t,e,l,c);i.vsub(s,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(s,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(i,d.rj),d.rj.vsub(a.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,s,i,o,n,r,a,l,c,u){const d=this.createContactEquation(r,a,t,e,l,c);if(d.ni.set(0,0,1),n.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),s.vsub(i,Ut),d.ni.scale(d.ni.dot(Ut),Pe),Ut.vsub(Pe,d.rj),-Ut.dot(d.ni)<=t.radius){if(u)return!0;const y=d.ri,p=d.rj;y.vadd(s,y),y.vsub(r.position,y),p.vadd(i,p),p.vsub(a.position,p),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,s,i,o,n,r,a,l,c,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,u)}sphereBox(t,e,s,i,o,n,r,a,l,c,u){const d=this.v3pool,y=Qo;s.vsub(i,Dt),e.getSideNormals(y,n);const p=t.radius;let m=!1;const v=Jo,g=tn,f=en;let w=null,x=0,b=0,B=0,F=null;for(let I=0,V=y.length;I!==V&&m===!1;I++){const k=$o;k.copy(y[I]);const L=k.length();k.normalize();const j=Dt.dot(k);if(j<L+p&&j>0){const G=Ko,M=Zo;G.copy(y[(I+1)%3]),M.copy(y[(I+2)%3]);const Z=G.length(),Q=M.length();G.normalize(),M.normalize();const _=Dt.dot(G),X=Dt.dot(M);if(_<Z&&_>-Z&&X<Q&&X>-Q){const K=Math.abs(j-L-p);if((F===null||K<F)&&(F=K,b=_,B=X,w=L,v.copy(k),g.copy(G),f.copy(M),x++,u))return!0}}}if(x){m=!0;const I=this.createContactEquation(r,a,t,e,l,c);v.scale(-p,I.ri),I.ni.copy(v),I.ni.negate(I.ni),v.scale(w,v),g.scale(b,g),v.vadd(g,v),f.scale(B,f),v.vadd(f,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),I.rj.vadd(i,I.rj),I.rj.vsub(a.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}let P=d.get();const W=_o;for(let I=0;I!==2&&!m;I++)for(let V=0;V!==2&&!m;V++)for(let k=0;k!==2&&!m;k++)if(P.set(0,0,0),I?P.vadd(y[0],P):P.vsub(y[0],P),V?P.vadd(y[1],P):P.vsub(y[1],P),k?P.vadd(y[2],P):P.vsub(y[2],P),i.vadd(P,W),W.vsub(s,W),W.lengthSquared()<p*p){if(u)return!0;m=!0;const L=this.createContactEquation(r,a,t,e,l,c);L.ri.copy(W),L.ri.normalize(),L.ni.copy(L.ri),L.ri.scale(p,L.ri),L.rj.copy(P),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),L.rj.vadd(i,L.rj),L.rj.vsub(a.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}d.release(P),P=null;const q=d.get(),N=d.get(),T=d.get(),A=d.get(),S=d.get(),C=y.length;for(let I=0;I!==C&&!m;I++)for(let V=0;V!==C&&!m;V++)if(I%3!==V%3){y[V].cross(y[I],q),q.normalize(),y[I].vadd(y[V],N),T.copy(s),T.vsub(N,T),T.vsub(i,T);const k=T.dot(q);q.scale(k,A);let L=0;for(;L===I%3||L===V%3;)L++;S.copy(s),S.vsub(A,S),S.vsub(N,S),S.vsub(i,S);const j=Math.abs(k),G=S.length();if(j<y[L].length()&&G<p){if(u)return!0;m=!0;const M=this.createContactEquation(r,a,t,e,l,c);N.vadd(A,M.rj),M.rj.copy(M.rj),S.negate(M.ni),M.ni.normalize(),M.ri.copy(M.rj),M.ri.vadd(i,M.ri),M.ri.vsub(s,M.ri),M.ri.normalize(),M.ri.scale(p,M.ri),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),M.rj.vadd(i,M.rj),M.rj.vsub(a.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult)}}d.release(q,N,T,A,S)}planeBox(t,e,s,i,o,n,r,a,l,c,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,u)}convexConvex(t,e,s,i,o,n,r,a,l,c,u,d,y){const p=fn;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,o,i,n,p,d,y)){const m=[],v=gn;t.clipAgainstHull(s,o,e,i,n,p,-100,100,m);let g=0;for(let f=0;f!==m.length;f++){if(u)return!0;const w=this.createContactEquation(r,a,t,e,l,c),x=w.ri,b=w.rj;p.negate(w.ni),m[f].normal.negate(v),v.scale(m[f].depth,v),m[f].point.vadd(v,x),b.copy(m[f].point),x.vsub(s,x),b.vsub(i,b),x.vadd(s,x),x.vsub(r.position,x),b.vadd(i,b),b.vsub(a.position,b),this.result.push(w),g++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(w,this.frictionResult)}this.enableFrictionReduction&&g&&this.createFrictionFromAverage(g)}}sphereConvex(t,e,s,i,o,n,r,a,l,c,u){const d=this.v3pool;s.vsub(i,sn);const y=e.faceNormals,p=e.faces,m=e.vertices,v=t.radius;let g=!1;for(let f=0;f!==m.length;f++){const w=m[f],x=an;n.vmult(w,x),i.vadd(x,x);const b=rn;if(x.vsub(s,b),b.lengthSquared()<v*v){if(u)return!0;g=!0;const B=this.createContactEquation(r,a,t,e,l,c);B.ri.copy(b),B.ri.normalize(),B.ni.copy(B.ri),B.ri.scale(v,B.ri),x.vsub(i,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),B.rj.vadd(i,B.rj),B.rj.vsub(a.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult);return}}for(let f=0,w=p.length;f!==w&&g===!1;f++){const x=y[f],b=p[f],B=ln;n.vmult(x,B);const F=hn;n.vmult(m[b[0]],F),F.vadd(i,F);const P=cn;B.scale(-v,P),s.vadd(P,P);const W=dn;P.vsub(F,W);const q=W.dot(B),N=un;if(s.vsub(F,N),q<0&&N.dot(B)>0){const T=[];for(let A=0,S=b.length;A!==S;A++){const C=d.get();n.vmult(m[b[A]],C),i.vadd(C,C),T.push(C)}if(Yo(T,B,s)){if(u)return!0;g=!0;const A=this.createContactEquation(r,a,t,e,l,c);B.scale(-v,A.ri),B.negate(A.ni);const S=d.get();B.scale(-q,S);const C=d.get();B.scale(-v,C),s.vsub(i,A.rj),A.rj.vadd(C,A.rj),A.rj.vadd(S,A.rj),A.rj.vadd(i,A.rj),A.rj.vsub(a.position,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),d.release(S),d.release(C),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult);for(let I=0,V=T.length;I!==V;I++)d.release(T[I]);return}else for(let A=0;A!==b.length;A++){const S=d.get(),C=d.get();n.vmult(m[b[(A+1)%b.length]],S),n.vmult(m[b[(A+2)%b.length]],C),i.vadd(S,S),i.vadd(C,C);const I=on;C.vsub(S,I);const V=nn;I.unit(V);const k=d.get(),L=d.get();s.vsub(S,L);const j=L.dot(V);V.scale(j,k),k.vadd(S,k);const G=d.get();if(k.vsub(s,G),j>0&&j*j<I.lengthSquared()&&G.lengthSquared()<v*v){if(u)return!0;const M=this.createContactEquation(r,a,t,e,l,c);k.vsub(i,M.rj),k.vsub(s,M.ni),M.ni.normalize(),M.ni.scale(v,M.ri),M.rj.vadd(i,M.rj),M.rj.vsub(a.position,M.rj),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult);for(let Z=0,Q=T.length;Z!==Q;Z++)d.release(T[Z]);d.release(S),d.release(C),d.release(k),d.release(G),d.release(L);return}d.release(S),d.release(C),d.release(k),d.release(G),d.release(L)}for(let A=0,S=T.length;A!==S;A++)d.release(T[A])}}}planeConvex(t,e,s,i,o,n,r,a,l,c,u){const d=pn,y=yn;y.set(0,0,1),o.vmult(y,y);let p=0;const m=mn;for(let v=0;v!==e.vertices.length;v++)if(d.copy(e.vertices[v]),n.vmult(d,d),i.vadd(d,d),d.vsub(s,m),y.dot(m)<=0){if(u)return!0;const g=this.createContactEquation(r,a,t,e,l,c),f=vn;y.scale(y.dot(m),f),d.vsub(f,f),f.vsub(s,g.ri),g.ni.copy(y),d.vsub(i,g.rj),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),g.rj.vadd(i,g.rj),g.rj.vsub(a.position,g.rj),this.result.push(g),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(g,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,o,n,r,a,l,c,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,u)}sphereHeightfield(t,e,s,i,o,n,r,a,l,c,u){const d=e.data,y=t.radius,p=e.elementSize,m=In,v=Tn;O.pointToLocalFrame(i,n,s,v);let g=Math.floor((v.x-y)/p)-1,f=Math.ceil((v.x+y)/p)+1,w=Math.floor((v.y-y)/p)-1,x=Math.ceil((v.y+y)/p)+1;if(f<0||x<0||g>d.length||w>d[0].length)return;g<0&&(g=0),f<0&&(f=0),w<0&&(w=0),x<0&&(x=0),g>=d.length&&(g=d.length-1),f>=d.length&&(f=d.length-1),x>=d[0].length&&(x=d[0].length-1),w>=d[0].length&&(w=d[0].length-1);const b=[];e.getRectMinMax(g,w,f,x,b);const B=b[0],F=b[1];if(v.z-y>F||v.z+y<B)return;const P=this.result;for(let W=g;W<f;W++)for(let q=w;q<x;q++){const N=P.length;let T=!1;if(e.getConvexTrianglePillar(W,q,!1),O.pointToWorldFrame(i,n,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(T=this.sphereConvex(t,e.pillarConvex,s,m,o,n,r,a,t,e,u)),u&&T||(e.getConvexTrianglePillar(W,q,!0),O.pointToWorldFrame(i,n,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(T=this.sphereConvex(t,e.pillarConvex,s,m,o,n,r,a,t,e,u)),u&&T))return!0;if(P.length-N>2)return}}boxHeightfield(t,e,s,i,o,n,r,a,l,c,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,u)}convexHeightfield(t,e,s,i,o,n,r,a,l,c,u){const d=e.data,y=e.elementSize,p=t.boundingSphereRadius,m=zn,v=Fn,g=Cn;O.pointToLocalFrame(i,n,s,g);let f=Math.floor((g.x-p)/y)-1,w=Math.ceil((g.x+p)/y)+1,x=Math.floor((g.y-p)/y)-1,b=Math.ceil((g.y+p)/y)+1;if(w<0||b<0||f>d.length||x>d[0].length)return;f<0&&(f=0),w<0&&(w=0),x<0&&(x=0),b<0&&(b=0),f>=d.length&&(f=d.length-1),w>=d.length&&(w=d.length-1),b>=d[0].length&&(b=d[0].length-1),x>=d[0].length&&(x=d[0].length-1);const B=[];e.getRectMinMax(f,x,w,b,B);const F=B[0],P=B[1];if(!(g.z-p>P||g.z+p<F))for(let W=f;W<w;W++)for(let q=x;q<b;q++){let N=!1;if(e.getConvexTrianglePillar(W,q,!1),O.pointToWorldFrame(i,n,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.convexConvex(t,e.pillarConvex,s,m,o,n,r,a,null,null,u,v,null)),u&&N||(e.getConvexTrianglePillar(W,q,!0),O.pointToWorldFrame(i,n,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.convexConvex(t,e.pillarConvex,s,m,o,n,r,a,null,null,u,v,null)),u&&N))return!0}}sphereParticle(t,e,s,i,o,n,r,a,l,c,u){const d=An;if(d.set(0,0,1),i.vsub(s,d),d.lengthSquared()<=t.radius*t.radius){if(u)return!0;const y=this.createContactEquation(a,r,e,t,l,c);d.normalize(),y.rj.copy(d),y.rj.scale(t.radius,y.rj),y.ni.copy(d),y.ni.negate(y.ni),y.ri.set(0,0,0),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}planeParticle(t,e,s,i,o,n,r,a,l,c,u){const d=wn;d.set(0,0,1),r.quaternion.vmult(d,d);const y=xn;if(i.vsub(r.position,y),d.dot(y)<=0){if(u)return!0;const p=this.createContactEquation(a,r,e,t,l,c);p.ni.copy(d),p.ni.negate(p.ni),p.ri.set(0,0,0);const m=bn;d.scale(d.dot(i),m),i.vsub(m,m),p.rj.copy(m),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}boxParticle(t,e,s,i,o,n,r,a,l,c,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,u)}convexParticle(t,e,s,i,o,n,r,a,l,c,u){let d=-1;const y=En,p=Sn;let m=null;const v=Bn;if(v.copy(i),v.vsub(s,v),o.conjugate(qe),qe.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,o),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(o);for(let g=0,f=t.faces.length;g!==f;g++){const w=[t.worldVertices[t.faces[g][0]]],x=t.worldFaceNormals[g];i.vsub(w[0],Ne);const b=-x.dot(Ne);if(m===null||Math.abs(b)<Math.abs(m)){if(u)return!0;m=b,d=g,y.copy(x)}}if(d!==-1){const g=this.createContactEquation(a,r,e,t,l,c);y.scale(m,p),p.vadd(i,p),p.vsub(s,p),g.rj.copy(p),y.negate(g.ni),g.ri.set(0,0,0);const f=g.ri,w=g.rj;f.vadd(i,f),f.vsub(a.position,f),w.vadd(s,w),w.vsub(r.position,w),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,o,n,r,a,l,c,u){return this.convexHeightfield(e,t,i,s,n,o,a,r,l,c,u)}particleCylinder(t,e,s,i,o,n,r,a,l,c,u){return this.convexParticle(e,t,i,s,n,o,a,r,l,c,u)}sphereTrimesh(t,e,s,i,o,n,r,a,l,c,u){const d=Po,y=qo,p=No,m=Lo,v=Wo,g=Vo,f=Ho,w=Mo,x=Io,b=Uo;O.pointToLocalFrame(i,n,s,v);const B=t.radius;f.lowerBound.set(v.x-B,v.y-B,v.z-B),f.upperBound.set(v.x+B,v.y+B,v.z+B),e.getTrianglesInAABB(f,b);const F=Ro,P=t.radius*t.radius;for(let A=0;A<b.length;A++)for(let S=0;S<3;S++)if(e.getVertex(e.indices[b[A]*3+S],F),F.vsub(v,x),x.lengthSquared()<=P){if(w.copy(F),O.pointToWorldFrame(i,n,w,F),F.vsub(s,x),u)return!0;let C=this.createContactEquation(r,a,t,e,l,c);C.ni.copy(x),C.ni.normalize(),C.ri.copy(C.ni),C.ri.scale(t.radius,C.ri),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.copy(F),C.rj.vsub(a.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}for(let A=0;A<b.length;A++)for(let S=0;S<3;S++){e.getVertex(e.indices[b[A]*3+S],d),e.getVertex(e.indices[b[A]*3+(S+1)%3],y),y.vsub(d,p),v.vsub(y,g);const C=g.dot(p);v.vsub(d,g);let I=g.dot(p);if(I>0&&C<0&&(v.vsub(d,g),m.copy(p),m.normalize(),I=g.dot(m),m.scale(I,g),g.vadd(d,g),g.distanceTo(v)<t.radius)){if(u)return!0;const V=this.createContactEquation(r,a,t,e,l,c);g.vsub(v,V.ni),V.ni.normalize(),V.ni.scale(t.radius,V.ri),V.ri.vadd(s,V.ri),V.ri.vsub(r.position,V.ri),O.pointToWorldFrame(i,n,g,g),g.vsub(a.position,V.rj),O.vectorToWorldFrame(n,V.ni,V.ni),O.vectorToWorldFrame(n,V.ri,V.ri),this.result.push(V),this.createFrictionEquationsFromContact(V,this.frictionResult)}}const W=jo,q=Oo,N=ko,T=To;for(let A=0,S=b.length;A!==S;A++){e.getTriangleVertices(b[A],W,q,N),e.getNormal(b[A],T),v.vsub(W,g);let C=g.dot(T);if(T.scale(C,g),v.vsub(g,g),C=g.distanceTo(v),Y.pointInTriangle(g,W,q,N)&&C<t.radius){if(u)return!0;let I=this.createContactEquation(r,a,t,e,l,c);g.vsub(v,I.ni),I.ni.normalize(),I.ni.scale(t.radius,I.ri),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),O.pointToWorldFrame(i,n,g,g),g.vsub(a.position,I.rj),O.vectorToWorldFrame(n,I.ni,I.ni),O.vectorToWorldFrame(n,I.ri,I.ri),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,i,o,n,r,a,l,c,u){const d=new h,y=Co;y.set(0,0,1),o.vmult(y,y);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,d);const m=new h;m.copy(d),O.pointToWorldFrame(i,n,m,d);const v=zo;if(d.vsub(s,v),y.dot(v)<=0){if(u)return!0;const g=this.createContactEquation(r,a,t,e,l,c);g.ni.copy(y);const f=Fo;y.scale(v.dot(y),f),d.vsub(f,f),g.ri.copy(f),g.ri.vsub(r.position,g.ri),g.rj.copy(d),g.rj.vsub(a.position,g.rj),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}}}}const xt=new h,St=new h,Ct=new h,Ao=new h,Bo=new h,Eo=new D,So=new D,Co=new h,zo=new h,Fo=new h,To=new h,Io=new h;new h;const Ro=new h,Mo=new h,Po=new h,qo=new h,No=new h,Lo=new h,Wo=new h,Vo=new h,jo=new h,Oo=new h,ko=new h,Ho=new U,Uo=[],Ut=new h,Pe=new h,Do=new h,Go=new h,Xo=new h;function Yo(E,t,e){let s=null;const i=E.length;for(let o=0;o!==i;o++){const n=E[o],r=Do;E[(o+1)%i].vsub(n,r);const a=Go;r.cross(t,a);const l=Xo;e.vsub(n,l);const c=a.dot(l);if(s===null||c>0&&s===!0||c<=0&&s===!1){s===null&&(s=c>0);continue}else return!1}return!0}const Dt=new h,$o=new h,Ko=new h,Zo=new h,Qo=[new h,new h,new h,new h,new h,new h],_o=new h,Jo=new h,tn=new h,en=new h,sn=new h,on=new h,nn=new h,rn=new h,an=new h,ln=new h,hn=new h,cn=new h,dn=new h,un=new h;new h;new h;const pn=new h,yn=new h,mn=new h,vn=new h,fn=new h,gn=new h,wn=new h,xn=new h,bn=new h,An=new h,qe=new D,Bn=new h;new h;const En=new h,Ne=new h,Sn=new h,Cn=new h,zn=new h,Fn=[0],Tn=new h,In=new h;class Le{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let o=0;for(;s>i[o];)o++;if(s!==i[o]){for(let n=i.length-1;n>=o;n--)i[n+1]=i[n];i[o]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,o=s.length,n=i.length;let r=0;for(let a=0;a<o;a++){let l=!1;const c=s[a];for(;c>i[r];)r++;l=c===i[r],l||We(t,c)}r=0;for(let a=0;a<n;a++){let l=!1;const c=i[a];for(;c>s[r];)r++;l=s[r]===c,l||We(e,c)}}}function We(E,t){E.push((t&4294901760)>>16,t&65535)}const Jt=(E,t)=>E<t?`${E}-${t}`:`${t}-${E}`;class Rn{constructor(){this.data={keys:[]}}get(t,e){const s=Jt(t,e);return this.data[s]}set(t,e,s){const i=Jt(t,e);this.get(t,e)||this.data.keys.push(i),this.data[i]=s}delete(t,e){const s=Jt(t,e),i=this.data.keys.indexOf(s);i!==-1&&this.data.keys.splice(i,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class _n extends Ve{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new h,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new h,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new xs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new ao,this.constraints=[],this.narrowphase=new bo(this),this.collisionMatrix=new de,this.collisionMatrixPrevious=new de,this.bodyOverlapKeeper=new Le,this.shapeOverlapKeeper=new Le,this.contactmaterials=[],this.contactMaterialTable=new Rn,this.defaultMaterial=new $t("default"),this.defaultContactMaterial=new Yt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof qt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,i){return s===void 0&&(s={}),s.mode=Y.ALL,s.from=t,s.to=e,s.callback=i,te.intersectWorld(this,s)}raycastAny(t,e,s,i){return s===void 0&&(s={}),s.mode=Y.ANY,s.from=t,s.to=e,s.result=i,te.intersectWorld(this,s)}raycastClosest(t,e,s,i){return s===void 0&&(s={}),s.mode=Y.CLOSEST,s.from=t,s.to=e,s.result=i,te.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof R&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(i!==-1){s.splice(i,1);for(let o=0;o!==s.length;o++)s[o].index=o;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let o=0;o<i.length;o++){const n=i[o];if(n.id===t)return n}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=$.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const i=s-this.lastCallTime;this.step(t,i,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=$.now();let o=0;for(;this.accumulator>=t&&o<s&&(this.internalStep(t),this.accumulator-=t,o++,!($.now()-i>t*1e3)););this.accumulator=this.accumulator%t;const n=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const a=this.bodies[r];a.previousPosition.lerp(a.position,n,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,n,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Ln,i=Wn,o=this.bodies.length,n=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,c=this.profile,u=R.DYNAMIC;let d=-1/0;const y=this.constraints,p=Nn;a.length();const m=a.x,v=a.y,g=a.z;let f=0;for(l&&(d=$.now()),f=0;f!==o;f++){const T=n[f];if(T.type===u){const A=T.force,S=T.mass;A.x+=S*m,A.y+=S*v,A.z+=S*g}}for(let T=0,A=this.subsystems.length;T!==A;T++)this.subsystems[T].update();l&&(d=$.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(c.broadphase=$.now()-d);let w=y.length;for(f=0;f!==w;f++){const T=y[f];if(!T.collideConnected)for(let A=s.length-1;A>=0;A-=1)(T.bodyA===s[A]&&T.bodyB===i[A]||T.bodyB===s[A]&&T.bodyA===i[A])&&(s.splice(A,1),i.splice(A,1))}this.collisionMatrixTick(),l&&(d=$.now());const x=qn,b=e.length;for(f=0;f!==b;f++)x.push(e[f]);e.length=0;const B=this.frictionEquations.length;for(f=0;f!==B;f++)p.push(this.frictionEquations[f]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,x,this.frictionEquations,p),l&&(c.narrowphase=$.now()-d),l&&(d=$.now()),f=0;f<this.frictionEquations.length;f++)r.addEquation(this.frictionEquations[f]);const F=e.length;for(let T=0;T!==F;T++){const A=e[T],S=A.bi,C=A.bj,I=A.si,V=A.sj;let k;if(S.material&&C.material?k=this.getContactMaterial(S.material,C.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,S.material&&C.material&&(S.material.friction>=0&&C.material.friction>=0&&S.material.friction*C.material.friction,S.material.restitution>=0&&C.material.restitution>=0&&(A.restitution=S.material.restitution*C.material.restitution)),r.addEquation(A),S.allowSleep&&S.type===R.DYNAMIC&&S.sleepState===R.SLEEPING&&C.sleepState===R.AWAKE&&C.type!==R.STATIC){const L=C.velocity.lengthSquared()+C.angularVelocity.lengthSquared(),j=C.sleepSpeedLimit**2;L>=j*2&&(S.wakeUpAfterNarrowphase=!0)}if(C.allowSleep&&C.type===R.DYNAMIC&&C.sleepState===R.SLEEPING&&S.sleepState===R.AWAKE&&S.type!==R.STATIC){const L=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),j=S.sleepSpeedLimit**2;L>=j*2&&(C.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,C,!0),this.collisionMatrixPrevious.get(S,C)||(Tt.body=C,Tt.contact=A,S.dispatchEvent(Tt),Tt.body=S,C.dispatchEvent(Tt)),this.bodyOverlapKeeper.set(S.id,C.id),this.shapeOverlapKeeper.set(I.id,V.id)}for(this.emitContactEvents(),l&&(c.makeContactConstraints=$.now()-d,d=$.now()),f=0;f!==o;f++){const T=n[f];T.wakeUpAfterNarrowphase&&(T.wakeUp(),T.wakeUpAfterNarrowphase=!1)}for(w=y.length,f=0;f!==w;f++){const T=y[f];T.update();for(let A=0,S=T.equations.length;A!==S;A++){const C=T.equations[A];r.addEquation(C)}}r.solve(t,this),l&&(c.solve=$.now()-d),r.removeAllEquations();const P=Math.pow;for(f=0;f!==o;f++){const T=n[f];if(T.type&u){const A=P(1-T.linearDamping,t),S=T.velocity;S.scale(A,S);const C=T.angularVelocity;if(C){const I=P(1-T.angularDamping,t);C.scale(I,C)}}}this.dispatchEvent(Pn),l&&(d=$.now());const W=this.stepnumber%(this.quatNormalizeSkip+1)===0,q=this.quatNormalizeFast;for(f=0;f!==o;f++)n[f].integrate(t,W,q);this.clearForces(),this.broadphase.dirty=!0,l&&(c.integrate=$.now()-d),this.stepnumber+=1,this.dispatchEvent(Mn);let N=!0;if(this.allowSleep)for(N=!1,f=0;f!==o;f++){const T=n[f];T.sleepTick(this.time),T.sleepState!==R.SLEEPING&&(N=!0)}this.hasActiveBodies=N}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(dt,ut),t){for(let o=0,n=dt.length;o<n;o+=2)It.bodyA=this.getBodyById(dt[o]),It.bodyB=this.getBodyById(dt[o+1]),this.dispatchEvent(It);It.bodyA=It.bodyB=null}if(e){for(let o=0,n=ut.length;o<n;o+=2)Rt.bodyA=this.getBodyById(ut[o]),Rt.bodyB=this.getBodyById(ut[o+1]),this.dispatchEvent(Rt);Rt.bodyA=Rt.bodyB=null}dt.length=ut.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(dt,ut),s){for(let o=0,n=dt.length;o<n;o+=2){const r=this.getShapeById(dt[o]),a=this.getShapeById(dt[o+1]);pt.shapeA=r,pt.shapeB=a,r&&(pt.bodyA=r.body),a&&(pt.bodyB=a.body),this.dispatchEvent(pt)}pt.bodyA=pt.bodyB=pt.shapeA=pt.shapeB=null}if(i){for(let o=0,n=ut.length;o<n;o+=2){const r=this.getShapeById(ut[o]),a=this.getShapeById(ut[o+1]);yt.shapeA=r,yt.shapeB=a,r&&(yt.bodyA=r.body),a&&(yt.bodyB=a.body),this.dispatchEvent(yt)}yt.bodyA=yt.bodyB=yt.shapeA=yt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const i=t[s];i.force,i.torque,i.force.set(0,0,0),i.torque.set(0,0,0)}}}new U;const te=new Y,$=globalThis.performance||{};if(!$.now){let E=Date.now();$.timing&&$.timing.navigationStart&&(E=$.timing.navigationStart),$.now=()=>Date.now()-E}new h;const Mn={type:"postStep"},Pn={type:"preStep"},Tt={type:R.COLLIDE_EVENT_NAME,body:null,contact:null},qn=[],Nn=[],Ln=[],Wn=[],dt=[],ut=[],It={type:"beginContact",bodyA:null,bodyB:null},Rt={type:"endContact",bodyA:null,bodyB:null},pt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},yt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};export{U as AABB,de as ArrayCollisionMatrix,ie as BODY_SLEEP_STATES,se as BODY_TYPES,R as Body,Gt as Box,oe as Broadphase,H as COLLISION_TYPES,On as ConeTwistConstraint,Nt as Constraint,Pt as ContactEquation,Yt as ContactMaterial,vt as ConvexPolyhedron,Yn as Cylinder,kn as DistanceConstraint,ft as Equation,Ve as EventTarget,be as FrictionEquation,ao as GSSolver,jn as GridBroadphase,Zn as Heightfield,_s as HingeConstraint,ve as JacobianElement,Hn as LockConstraint,et as Mat3,$t as Material,xs as NaiveBroadphase,bo as Narrowphase,Vn as ObjectCollisionMatrix,$n as Particle,Kn as Plane,re as PointToPointConstraint,wo as Pool,D as Quaternion,ne as RAY_MODES,Y as Ray,qt as RaycastResult,Dn as RaycastVehicle,Gn as RigidVehicle,zt as RotationalEquation,Qs as RotationalMotorEquation,Mt as SAPBroadphase,Je as SHAPE_TYPES,Xn as SPHSystem,z as Shape,Xe as Solver,Wi as Sphere,Qn as SplitSolver,Un as Spring,O as Transform,ee as Trimesh,h as Vec3,xo as Vec3Pool,yi as WheelInfo,_n as World};
